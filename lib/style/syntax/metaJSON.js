"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _metaJSON = require("../../scheme/syntax/metaJSON");

var metaJSONSyntaxStyle = "\n\n  .meta-json.syntax > .string-literal { color: ".concat(_metaJSON.stringLiteralColour, "; }\n\n  .meta-json.syntax > .dependency { color: ").concat(_metaJSON.dependencyColour, "; }\n\n  .meta-json.syntax > .dependency:hover { color: ").concat(_metaJSON.dependencyHoverColour, "; }\n\n  .meta-json.syntax > .dependency.faulty { color: ").concat(_metaJSON.faultyDependencyColour, "; }\n\n  .meta-json.syntax > .dependency.faulty:hover { color: ").concat(_metaJSON.faultyDependencyHoverColour, "; }\n\n  .meta-json.syntax > .dependency.disabled { color: ").concat(_metaJSON.disabledDependencyColour, "; }\n\n  .meta-json.syntax > .dependency.disabled:hover { color: ").concat(_metaJSON.disabledDependencyHoverColour, "; }\n\n  .meta-json.syntax > .repository, .meta-json.syntax > .repository a { color: ").concat(_metaJSON.repositoryColour, "; }\n\n  .meta-json.syntax > .repository:hover, .meta-json.syntax > .repository a:hover { color: ").concat(_metaJSON.repositoryHoverColour, "; }\n\n  .meta-json.syntax > .repository.faulty, .meta-json.syntax > .repository.faulty a { color: ").concat(_metaJSON.faultyRepositoryColour, "; }\n\n  .meta-json.syntax > .repository.faulty:hover, .meta-json.syntax > .repository.faulty a:hover { color: ").concat(_metaJSON.faultyRepositoryHoverColour, "; }\n\n  .meta-json.syntax > .repository.disabled, .meta-json.syntax > .repository.disabled a { color: ").concat(_metaJSON.disabledRepositoryColour, "; }\n\n  .meta-json.syntax > .repository.disabled:hover, .meta-json.syntax > .repository.disabled a:hover { color: ").concat(_metaJSON.disabledRepositoryHoverColour, "; }\n\n");
var _default = metaJSONSyntaxStyle;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGFKU09OLmpzIl0sIm5hbWVzIjpbIm1ldGFKU09OU3ludGF4U3R5bGUiLCJzdHJpbmdMaXRlcmFsQ29sb3VyIiwiZGVwZW5kZW5jeUNvbG91ciIsImRlcGVuZGVuY3lIb3ZlckNvbG91ciIsImZhdWx0eURlcGVuZGVuY3lDb2xvdXIiLCJmYXVsdHlEZXBlbmRlbmN5SG92ZXJDb2xvdXIiLCJkaXNhYmxlZERlcGVuZGVuY3lDb2xvdXIiLCJkaXNhYmxlZERlcGVuZGVuY3lIb3ZlckNvbG91ciIsInJlcG9zaXRvcnlDb2xvdXIiLCJyZXBvc2l0b3J5SG92ZXJDb2xvdXIiLCJmYXVsdHlSZXBvc2l0b3J5Q29sb3VyIiwiZmF1bHR5UmVwb3NpdG9yeUhvdmVyQ29sb3VyIiwiZGlzYWJsZWRSZXBvc2l0b3J5Q29sb3VyIiwiZGlzYWJsZWRSZXBvc2l0b3J5SG92ZXJDb2xvdXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUE7O0FBY0EsSUFBTUEsbUJBQW1CLGdFQUV3QkMsNkJBRnhCLCtEQUlvQkMsMEJBSnBCLHFFQU0wQkMsK0JBTjFCLHNFQVEyQkMsZ0NBUjNCLDRFQVVpQ0MscUNBVmpDLHdFQVk2QkMsa0NBWjdCLDhFQWNtQ0MsdUNBZG5DLGtHQWdCdURDLDBCQWhCdkQsOEdBa0JtRUMsK0JBbEJuRSxnSEFvQnFFQyxnQ0FwQnJFLDRIQXNCaUZDLHFDQXRCakYsb0hBd0J5RUMsa0NBeEJ6RSxnSUEwQnFGQyx1Q0ExQnJGLFlBQXpCO2VBOEJlYixtQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBzdHJpbmdMaXRlcmFsQ29sb3VyLFxuICAgICAgICAgZGVwZW5kZW5jeUNvbG91cixcbiAgICAgICAgIGRlcGVuZGVuY3lIb3ZlckNvbG91cixcbiAgICAgICAgIGZhdWx0eURlcGVuZGVuY3lDb2xvdXIsXG4gICAgICAgICBmYXVsdHlEZXBlbmRlbmN5SG92ZXJDb2xvdXIsXG4gICAgICAgICBkaXNhYmxlZERlcGVuZGVuY3lDb2xvdXIsXG4gICAgICAgICBkaXNhYmxlZERlcGVuZGVuY3lIb3ZlckNvbG91cixcbiAgICAgICAgIHJlcG9zaXRvcnlDb2xvdXIsXG4gICAgICAgICByZXBvc2l0b3J5SG92ZXJDb2xvdXIsXG4gICAgICAgICBmYXVsdHlSZXBvc2l0b3J5Q29sb3VyLFxuICAgICAgICAgZmF1bHR5UmVwb3NpdG9yeUhvdmVyQ29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRSZXBvc2l0b3J5Q29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRSZXBvc2l0b3J5SG92ZXJDb2xvdXIgfSBmcm9tIFwiLi4vLi4vc2NoZW1lL3N5bnRheC9tZXRhSlNPTlwiO1xuXG5jb25zdCBtZXRhSlNPTlN5bnRheFN0eWxlID0gYFxuXG4gIC5tZXRhLWpzb24uc3ludGF4ID4gLnN0cmluZy1saXRlcmFsIHsgY29sb3I6ICR7c3RyaW5nTGl0ZXJhbENvbG91cn07IH1cblxuICAubWV0YS1qc29uLnN5bnRheCA+IC5kZXBlbmRlbmN5IHsgY29sb3I6ICR7ZGVwZW5kZW5jeUNvbG91cn07IH1cblxuICAubWV0YS1qc29uLnN5bnRheCA+IC5kZXBlbmRlbmN5OmhvdmVyIHsgY29sb3I6ICR7ZGVwZW5kZW5jeUhvdmVyQ29sb3VyfTsgfVxuXG4gIC5tZXRhLWpzb24uc3ludGF4ID4gLmRlcGVuZGVuY3kuZmF1bHR5IHsgY29sb3I6ICR7ZmF1bHR5RGVwZW5kZW5jeUNvbG91cn07IH1cblxuICAubWV0YS1qc29uLnN5bnRheCA+IC5kZXBlbmRlbmN5LmZhdWx0eTpob3ZlciB7IGNvbG9yOiAke2ZhdWx0eURlcGVuZGVuY3lIb3ZlckNvbG91cn07IH1cblxuICAubWV0YS1qc29uLnN5bnRheCA+IC5kZXBlbmRlbmN5LmRpc2FibGVkIHsgY29sb3I6ICR7ZGlzYWJsZWREZXBlbmRlbmN5Q29sb3VyfTsgfVxuXG4gIC5tZXRhLWpzb24uc3ludGF4ID4gLmRlcGVuZGVuY3kuZGlzYWJsZWQ6aG92ZXIgeyBjb2xvcjogJHtkaXNhYmxlZERlcGVuZGVuY3lIb3ZlckNvbG91cn07IH1cblxuICAubWV0YS1qc29uLnN5bnRheCA+IC5yZXBvc2l0b3J5LCAubWV0YS1qc29uLnN5bnRheCA+IC5yZXBvc2l0b3J5IGEgeyBjb2xvcjogJHtyZXBvc2l0b3J5Q29sb3VyfTsgfVxuXG4gIC5tZXRhLWpzb24uc3ludGF4ID4gLnJlcG9zaXRvcnk6aG92ZXIsIC5tZXRhLWpzb24uc3ludGF4ID4gLnJlcG9zaXRvcnkgYTpob3ZlciB7IGNvbG9yOiAke3JlcG9zaXRvcnlIb3ZlckNvbG91cn07IH1cblxuICAubWV0YS1qc29uLnN5bnRheCA+IC5yZXBvc2l0b3J5LmZhdWx0eSwgLm1ldGEtanNvbi5zeW50YXggPiAucmVwb3NpdG9yeS5mYXVsdHkgYSB7IGNvbG9yOiAke2ZhdWx0eVJlcG9zaXRvcnlDb2xvdXJ9OyB9XG5cbiAgLm1ldGEtanNvbi5zeW50YXggPiAucmVwb3NpdG9yeS5mYXVsdHk6aG92ZXIsIC5tZXRhLWpzb24uc3ludGF4ID4gLnJlcG9zaXRvcnkuZmF1bHR5IGE6aG92ZXIgeyBjb2xvcjogJHtmYXVsdHlSZXBvc2l0b3J5SG92ZXJDb2xvdXJ9OyB9XG5cbiAgLm1ldGEtanNvbi5zeW50YXggPiAucmVwb3NpdG9yeS5kaXNhYmxlZCwgLm1ldGEtanNvbi5zeW50YXggPiAucmVwb3NpdG9yeS5kaXNhYmxlZCBhIHsgY29sb3I6ICR7ZGlzYWJsZWRSZXBvc2l0b3J5Q29sb3VyfTsgfVxuXG4gIC5tZXRhLWpzb24uc3ludGF4ID4gLnJlcG9zaXRvcnkuZGlzYWJsZWQ6aG92ZXIsIC5tZXRhLWpzb24uc3ludGF4ID4gLnJlcG9zaXRvcnkuZGlzYWJsZWQgYTpob3ZlciB7IGNvbG9yOiAke2Rpc2FibGVkUmVwb3NpdG9yeUhvdmVyQ29sb3VyfTsgfVxuXG5gO1xuXG5leHBvcnQgZGVmYXVsdCBtZXRhSlNPTlN5bnRheFN0eWxlO1xuIl19