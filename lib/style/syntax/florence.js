"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _florence = require("../../scheme/syntax/florence");
var florenceSyntaxStyle = "\n\n  .florence.syntax > div > .type { color: ".concat(_florence.typeColour, "; }\n\n  .florence.syntax > div > .special { color: ").concat(_florence.specialColour, "; }\n  \n  .florence.syntax > div > .comment { color: ").concat(_florence.commentColour, "; }\n  \n  .florence.syntax > div > .operator { color: ").concat(_florence.operatorColour, "; }\n  \n  .florence.syntax > div > .meta-type { color: ").concat(_florence.metaTypeColour, "; }\n\n  .florence.syntax > div > .primary-keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > div > .secondary-keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > div > .string-literal { color: ").concat(_florence.stringLiteralColour, "; }\n\n  .florence.syntax > div > .name.context { color: ").concat(_florence.contextNameColour, "; }\n\n  .florence.syntax > div > .name.label { color: ").concat(_florence.labelNameColour, "; }\n  \n  .florence.syntax > div > .name.label:hover { color: ").concat(_florence.labelNameHoverColour, "; }\n\n  .florence.syntax > div > .name.label.disabled { color: ").concat(_florence.disabledLabelNameColour, "; }\n  \n  .florence.syntax > div > .name.label.disabled:hover { color: ").concat(_florence.disabledLabelNameHoverColour, "; }\n\n  .florence.syntax > div > .name.reference { color: ").concat(_florence.referenceNameColour, "; }\n  \n  .florence.syntax > div > .name.reference:hover { color: ").concat(_florence.referenceNameHoverColour, "; }\n\n  .florence.syntax > div > .name.reference.disabled { color: ").concat(_florence.disabledReferenceNameColour, "; }\n  \n  .florence.syntax > div > .name.reference.disabled:hover { color: ").concat(_florence.disabledReferenceNameHoverColour, "; }\n\n");
var _default = florenceSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvZmxvcmVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHR5cGVDb2xvdXIsXG4gICAgICAgICBzcGVjaWFsQ29sb3VyLFxuICAgICAgICAgY29tbWVudENvbG91cixcbiAgICAgICAgIGtleXdvcmRDb2xvdXIsXG4gICAgICAgICBvcGVyYXRvckNvbG91cixcbiAgICAgICAgIG1ldGFUeXBlQ29sb3VyLFxuICAgICAgICAgbGFiZWxOYW1lQ29sb3VyLFxuICAgICAgICAgY29udGV4dE5hbWVDb2xvdXIsXG4gICAgICAgICByZWZlcmVuY2VOYW1lQ29sb3VyLFxuICAgICAgICAgc3RyaW5nTGl0ZXJhbENvbG91cixcbiAgICAgICAgIGxhYmVsTmFtZUhvdmVyQ29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRMYWJlbE5hbWVDb2xvdXIsXG4gICAgICAgICByZWZlcmVuY2VOYW1lSG92ZXJDb2xvdXIsXG4gICAgICAgICBkaXNhYmxlZFJlZmVyZW5jZU5hbWVDb2xvdXIsXG4gICAgICAgICBkaXNhYmxlZExhYmVsTmFtZUhvdmVyQ29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRSZWZlcmVuY2VOYW1lSG92ZXJDb2xvdXIgfSBmcm9tIFwiLi4vLi4vc2NoZW1lL3N5bnRheC9mbG9yZW5jZVwiO1xuXG5jb25zdCBmbG9yZW5jZVN5bnRheFN0eWxlID0gYFxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAudHlwZSB7IGNvbG9yOiAke3R5cGVDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5zcGVjaWFsIHsgY29sb3I6ICR7c3BlY2lhbENvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAuY29tbWVudCB7IGNvbG9yOiAke2NvbW1lbnRDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm9wZXJhdG9yIHsgY29sb3I6ICR7b3BlcmF0b3JDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm1ldGEtdHlwZSB7IGNvbG9yOiAke21ldGFUeXBlQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAucHJpbWFyeS1rZXl3b3JkIHsgY29sb3I6ICR7a2V5d29yZENvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAuc2Vjb25kYXJ5LWtleXdvcmQgeyBjb2xvcjogJHtrZXl3b3JkQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5zdHJpbmctbGl0ZXJhbCB7IGNvbG9yOiAke3N0cmluZ0xpdGVyYWxDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5uYW1lLmNvbnRleHQgeyBjb2xvcjogJHtjb250ZXh0TmFtZUNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm5hbWUubGFiZWwgeyBjb2xvcjogJHtsYWJlbE5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm5hbWUubGFiZWw6aG92ZXIgeyBjb2xvcjogJHtsYWJlbE5hbWVIb3ZlckNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm5hbWUubGFiZWwuZGlzYWJsZWQgeyBjb2xvcjogJHtkaXNhYmxlZExhYmVsTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubmFtZS5sYWJlbC5kaXNhYmxlZDpob3ZlciB7IGNvbG9yOiAke2Rpc2FibGVkTGFiZWxOYW1lSG92ZXJDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5uYW1lLnJlZmVyZW5jZSB7IGNvbG9yOiAke3JlZmVyZW5jZU5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm5hbWUucmVmZXJlbmNlOmhvdmVyIHsgY29sb3I6ICR7cmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubmFtZS5yZWZlcmVuY2UuZGlzYWJsZWQgeyBjb2xvcjogJHtkaXNhYmxlZFJlZmVyZW5jZU5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm5hbWUucmVmZXJlbmNlLmRpc2FibGVkOmhvdmVyIHsgY29sb3I6ICR7ZGlzYWJsZWRSZWZlcmVuY2VOYW1lSG92ZXJDb2xvdXJ9OyB9XG5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGZsb3JlbmNlU3ludGF4U3R5bGU7XG4iXSwibmFtZXMiOlsiZmxvcmVuY2VTeW50YXhTdHlsZSIsInNwZWNpYWxDb2xvdXIiLCJ0eXBlQ29sb3VyIiwiY29tbWVudENvbG91ciIsIm9wZXJhdG9yQ29sb3VyIiwibWV0YVR5cGVDb2xvdXIiLCJrZXl3b3JkQ29sb3VyIiwic3RyaW5nTGl0ZXJhbENvbG91ciIsImNvbnRleHROYW1lQ29sb3VyIiwibGFiZWxOYW1lQ29sb3VyIiwibGFiZWxOYW1lSG92ZXJDb2xvdXIiLCJkaXNhYmxlZExhYmVsTmFtZUNvbG91ciIsImRpc2FibGVkTGFiZWxOYW1lSG92ZXJDb2xvdXIiLCJyZWZlcmVuY2VOYW1lQ29sb3VyIiwicmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyIiwiZGlzYWJsZWRSZWZlcmVuY2VOYW1lQ29sb3VyIiwiZGlzYWJsZWRSZWZlcmVuY2VOYW1lSG92ZXJDb2xvdXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQXlEQTs7O2VBQUE7Ozt3QkF4Q2lEO0FBRWpELElBQU1BLHNCQUFzQixBQUFDLGlEQUlrQkMsT0FGSEMsc0JBQVcsd0RBSVJDLE9BRkFGLHlCQUFjLDBEQUliRyxPQUZERCx5QkFBYywyREFJWkUsT0FGREQsMEJBQWUsNERBSVJFLE9BRk5ELDBCQUFlLGdFQUlQQyxPQUZGQSx5QkFBYyxvRUFJZkMsT0FGR0QseUJBQWMsaUVBSW5CRSxPQUZFRCwrQkFBb0IsNkRBSXhCRSxPQUZFRCw2QkFBa0IsMkRBSWRFLE9BRk5ELDJCQUFnQixtRUFJUEUsT0FGSEQsZ0NBQXFCLG9FQUlaRSxPQUZORCxtQ0FBd0IsNEVBSTdCRSxPQUZXRCx3Q0FBNkIsK0RBSWxDRSxPQUZORCwrQkFBb0IsdUVBSVhFLE9BRkhELG9DQUF5Qix3RUFJaEJFLE9BRk5ELHVDQUE0QixnRkFFVyxPQUFqQ0MsNENBQWlDO0lBSXRHLFdBQWVoQiJ9