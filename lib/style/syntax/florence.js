"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _florence = require("../../scheme/syntax/florence");
var florenceSyntaxStyle = "\n\n  .florence.syntax > div > .type { color: ".concat(_florence.typeColour, "; }\n\n  .florence.syntax > div > .special { color: ").concat(_florence.specialColour, "; }\n  \n  .florence.syntax > div > .comment { color: ").concat(_default.commentColour, "; }\n  \n  .florence.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .florence.syntax > div > .operator { color: ").concat(_florence.operatorColour, "; }\n  \n  .florence.syntax > div > .context { color: ").concat(_florence.contextColour, "; }\n\n  .florence.syntax > div > .meta-type { color: ").concat(_florence.metaTypeColour, "; }\n\n  .florence.syntax > div > .primary-keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > div > .secondary-keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n\n  .florence.syntax > div > .metavariable { color: ").concat(_florence.metavariableColour, "; }\n  \n  .florence.syntax > div > .metavariable:hover { color: ").concat(_florence.metavariableHoverColour, "; }\n\n  .florence.syntax > div > .metavariable:disabled { color: ").concat(_florence.disabledMetavariableColour, "; }\n  \n  .florence.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = florenceSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvZmxvcmVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGVycm9yQ29sb3VyLCBjb21tZW50Q29sb3VyLCBub25zZW5zZUNvbG91ciwgc3RyaW5nTGl0ZXJhbENvbG91ciwgZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L2RlZmF1bHRcIjtcbmltcG9ydCB7IHR5cGVDb2xvdXIsXG4gICAgICAgICBzcGVjaWFsQ29sb3VyLFxuICAgICAgICAga2V5d29yZENvbG91cixcbiAgICAgICAgIG9wZXJhdG9yQ29sb3VyLFxuICAgICAgICBjb250ZXh0Q29sb3VyLFxuICAgICAgICAgbWV0YVR5cGVDb2xvdXIsXG4gICAgICAgICBtZXRhdmFyaWFibGVDb2xvdXIsXG4gICAgICAgICBtZXRhdmFyaWFibGVIb3ZlckNvbG91cixcbiAgICAgICAgIGRpc2FibGVkTWV0YXZhcmlhYmxlQ29sb3VyIH0gZnJvbSBcIi4uLy4uL3NjaGVtZS9zeW50YXgvZmxvcmVuY2VcIjtcblxuY29uc3QgZmxvcmVuY2VTeW50YXhTdHlsZSA9IGBcblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLnR5cGUgeyBjb2xvcjogJHt0eXBlQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAuc3BlY2lhbCB7IGNvbG9yOiAke3NwZWNpYWxDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLmNvbW1lbnQgeyBjb2xvcjogJHtjb21tZW50Q29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5ub25zZW5zZSB7IGNvbG9yOiAke25vbnNlbnNlQ29sb3VyfTsgfSBcblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm9wZXJhdG9yIHsgY29sb3I6ICR7b3BlcmF0b3JDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLmNvbnRleHQgeyBjb2xvcjogJHtjb250ZXh0Q29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubWV0YS10eXBlIHsgY29sb3I6ICR7bWV0YVR5cGVDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5wcmltYXJ5LWtleXdvcmQgeyBjb2xvcjogJHtrZXl3b3JkQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5zZWNvbmRhcnkta2V5d29yZCB7IGNvbG9yOiAke2tleXdvcmRDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLnN0cmluZy1saXRlcmFsIHsgY29sb3I6ICR7c3RyaW5nTGl0ZXJhbENvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm1ldGF2YXJpYWJsZSB7IGNvbG9yOiAke21ldGF2YXJpYWJsZUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubWV0YXZhcmlhYmxlOmhvdmVyIHsgY29sb3I6ICR7bWV0YXZhcmlhYmxlSG92ZXJDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5tZXRhdmFyaWFibGU6ZGlzYWJsZWQgeyBjb2xvcjogJHtkaXNhYmxlZE1ldGF2YXJpYWJsZUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAuZXJyb3Ige1xuICAgIGNvbG9yOiAke2Vycm9yQ29sb3VyfTtcbiAgICB0ZXh0LWRlY29yYXRpb24tbGluZTogdW5kZXJsaW5lO1xuICAgIHRleHQtZGVjb3JhdGlvbi1jb2xvcjogJHtlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyfTtcbiAgfSBcblxuYDtcblxuZXhwb3J0IGRlZmF1bHQgZmxvcmVuY2VTeW50YXhTdHlsZTtcbiJdLCJuYW1lcyI6WyJmbG9yZW5jZVN5bnRheFN0eWxlIiwic3BlY2lhbENvbG91ciIsInR5cGVDb2xvdXIiLCJjb21tZW50Q29sb3VyIiwibm9uc2Vuc2VDb2xvdXIiLCJvcGVyYXRvckNvbG91ciIsImNvbnRleHRDb2xvdXIiLCJtZXRhVHlwZUNvbG91ciIsImtleXdvcmRDb2xvdXIiLCJzdHJpbmdMaXRlcmFsQ29sb3VyIiwibWV0YXZhcmlhYmxlQ29sb3VyIiwibWV0YXZhcmlhYmxlSG92ZXJDb2xvdXIiLCJkaXNhYmxlZE1ldGF2YXJpYWJsZUNvbG91ciIsImVycm9yQ29sb3VyIiwiZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91ciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBaURBOzs7ZUFBQTs7O3VCQS9DMkc7d0JBU2hFO0FBRTNDLElBQU1BLHNCQUFzQixBQUFDLGlEQUlrQkMsT0FGSEMsb0JBQVUsRUFBQyx3REFJUkMsT0FGQUYsdUJBQWEsRUFBQywwREFJYkcsT0FGREQsc0JBQWEsRUFBQywyREFJYkUsT0FGQUQsdUJBQWMsRUFBQywwREFJaEJFLE9BRkNELHdCQUFjLEVBQUMsMERBSWRFLE9BRkZELHVCQUFhLEVBQUMsMERBSU5FLE9BRk5ELHdCQUFjLEVBQUMsZ0VBSVBDLE9BRkZBLHVCQUFhLEVBQUMsb0VBSWZDLE9BRkdELHVCQUFhLEVBQUMsaUVBSW5CRSxPQUZFRCw0QkFBbUIsRUFBQyw2REFJaEJFLE9BRk5ELDRCQUFrQixFQUFDLHFFQUlWRSxPQUZIRCxpQ0FBdUIsRUFBQyxzRUFLckVFLE9BSGdERCxvQ0FBMEIsRUFBQyw2REFLM0RFLE9BRmhCRCxvQkFBVyxFQUFDLHdFQUU4QixPQUExQkMsa0NBQXlCLEVBQUM7SUFLdkQsWUFBZWQifQ==