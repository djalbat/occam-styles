"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _florence = require("../../scheme/syntax/florence");
var florenceSyntaxStyle = "\n\n  .florence.syntax > div > .type { color: ".concat(_florence.typeColour, "; }\n\n  .florence.syntax > div > .special { color: ").concat(_florence.specialColour, "; }\n  \n  .florence.syntax > div > .comment { color: ").concat(_default.commentColour, "; }\n  \n  .florence.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .florence.syntax > div > .operator { color: ").concat(_florence.operatorColour, "; }\n  \n  .florence.syntax > div > .meta-type { color: ").concat(_florence.metaTypeColour, "; }\n\n  .florence.syntax > div > .primary-keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > div > .secondary-keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n\n  .florence.syntax > div > .context { color: ").concat(_florence.contextColour, "; }\n\n  .florence.syntax > div > .label { color: ").concat(_florence.labelColour, "; }\n  \n  .florence.syntax > div > .label:hover { color: ").concat(_florence.labelHoverColour, "; }\n\n  .florence.syntax > div > .label:disabled { color: ").concat(_florence.disabledLabelColour, "; }\n  \n  .florence.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = florenceSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvZmxvcmVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGVycm9yQ29sb3VyLCBjb21tZW50Q29sb3VyLCBub25zZW5zZUNvbG91ciwgc3RyaW5nTGl0ZXJhbENvbG91ciwgZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L2RlZmF1bHRcIjtcbmltcG9ydCB7IHR5cGVDb2xvdXIsXG4gICAgICAgICBzcGVjaWFsQ29sb3VyLFxuICAgICAgICAga2V5d29yZENvbG91cixcbiAgICAgICAgIG9wZXJhdG9yQ29sb3VyLFxuICAgICAgICAgbWV0YVR5cGVDb2xvdXIsXG4gICAgICAgICBsYWJlbENvbG91cixcbiAgICAgICAgIGNvbnRleHRDb2xvdXIsXG4gICAgICAgICBsYWJlbEhvdmVyQ29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRMYWJlbENvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L2Zsb3JlbmNlXCI7XG5cbmNvbnN0IGZsb3JlbmNlU3ludGF4U3R5bGUgPSBgXG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC50eXBlIHsgY29sb3I6ICR7dHlwZUNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLnNwZWNpYWwgeyBjb2xvcjogJHtzcGVjaWFsQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5jb21tZW50IHsgY29sb3I6ICR7Y29tbWVudENvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubm9uc2Vuc2UgeyBjb2xvcjogJHtub25zZW5zZUNvbG91cn07IH0gXG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5vcGVyYXRvciB7IGNvbG9yOiAke29wZXJhdG9yQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5tZXRhLXR5cGUgeyBjb2xvcjogJHttZXRhVHlwZUNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLnByaW1hcnkta2V5d29yZCB7IGNvbG9yOiAke2tleXdvcmRDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLnNlY29uZGFyeS1rZXl3b3JkIHsgY29sb3I6ICR7a2V5d29yZENvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAuc3RyaW5nLWxpdGVyYWwgeyBjb2xvcjogJHtzdHJpbmdMaXRlcmFsQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAuY29udGV4dCB7IGNvbG9yOiAke2NvbnRleHRDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5sYWJlbCB7IGNvbG9yOiAke2xhYmVsQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5sYWJlbDpob3ZlciB7IGNvbG9yOiAke2xhYmVsSG92ZXJDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5sYWJlbDpkaXNhYmxlZCB7IGNvbG9yOiAke2Rpc2FibGVkTGFiZWxDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLmVycm9yIHtcbiAgICBjb2xvcjogJHtlcnJvckNvbG91cn07XG4gICAgdGV4dC1kZWNvcmF0aW9uLWxpbmU6IHVuZGVybGluZTtcbiAgICB0ZXh0LWRlY29yYXRpb24tY29sb3I6ICR7ZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91cn07XG4gIH0gXG5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGZsb3JlbmNlU3ludGF4U3R5bGU7XG4iXSwibmFtZXMiOlsiZmxvcmVuY2VTeW50YXhTdHlsZSIsInNwZWNpYWxDb2xvdXIiLCJ0eXBlQ29sb3VyIiwiY29tbWVudENvbG91ciIsIm5vbnNlbnNlQ29sb3VyIiwib3BlcmF0b3JDb2xvdXIiLCJtZXRhVHlwZUNvbG91ciIsImtleXdvcmRDb2xvdXIiLCJzdHJpbmdMaXRlcmFsQ29sb3VyIiwiY29udGV4dENvbG91ciIsImxhYmVsQ29sb3VyIiwibGFiZWxIb3ZlckNvbG91ciIsImRpc2FibGVkTGFiZWxDb2xvdXIiLCJlcnJvckNvbG91ciIsImVycm9yVGV4dERlY29yYXRpb25Db2xvdXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWlEQTs7O2VBQUE7Ozt1QkEvQzJHO3dCQVN2RTtBQUVwQyxJQUFNQSxzQkFBc0IsQUFBQyxpREFJa0JDLE9BRkhDLG9CQUFVLEVBQUMsd0RBSVJDLE9BRkFGLHVCQUFhLEVBQUMsMERBSWJHLE9BRkRELHNCQUFhLEVBQUMsMkRBSWJFLE9BRkFELHVCQUFjLEVBQUMsMERBSWRFLE9BRkRELHdCQUFjLEVBQUMsNERBSVJFLE9BRk5ELHdCQUFjLEVBQUMsZ0VBSVBDLE9BRkZBLHVCQUFhLEVBQUMsb0VBSWZDLE9BRkdELHVCQUFhLEVBQUMsaUVBSXhCRSxPQUZPRCw0QkFBbUIsRUFBQyx3REFJN0JFLE9BRkVELHVCQUFhLEVBQUMsc0RBSVZFLE9BRk5ELHFCQUFXLEVBQUMsOERBSUhFLE9BRkhELDBCQUFnQixFQUFDLCtEQUt2REUsT0FIeUNELDZCQUFtQixFQUFDLDZEQUs3Q0UsT0FGaEJELG9CQUFXLEVBQUMsd0VBRThCLE9BQTFCQyxrQ0FBeUIsRUFBQztJQUt2RCxZQUFlZCJ9