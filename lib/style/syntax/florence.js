"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _florence = require("../../scheme/syntax/florence");
var florenceSyntaxStyle = "\n\n  .florence.syntax > .custom { color: ".concat(_florence.customColour, "; }\n  \n  .florence.syntax > .special { color: ").concat(_florence.specialColour, "; }\n  \n  .florence.syntax > .comment { color: ").concat(_florence.commentColour, "; }\n  \n  .florence.syntax > .keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > .reserved { color: ").concat(_florence.reservedColour, "; }\n  \n  .florence.syntax > .string-literal { color: ").concat(_florence.stringLiteralColour, "; }\n\n  .florence.syntax > .name.type { color: ").concat(_florence.typeNameColour, "; }\n\n  .florence.syntax > .name.context { color: ").concat(_florence.contextNameColour, "; }\n\n  .florence.syntax > .name.variable { color: ").concat(_florence.variableNameColour, "; }\n\n  .florence.syntax > .name.metavariable { color: ").concat(_florence.metavariableNameColour, "; }\n  \n  .florence.syntax > .name.label { color: ").concat(_florence.labelNameColour, "; }\n  \n  .florence.syntax > .name.label:hover { color: ").concat(_florence.labelNameHoverColour, "; }\n\n  .florence.syntax > .name.label.faulty { color: ").concat(_florence.faultyLabelNameColour, "; }\n  \n  .florence.syntax > .name.label.faulty:hover { color: ").concat(_florence.faultyLabelNameHoverColour, "; }\n\n  .florence.syntax > .name.label.disabled { color: ").concat(_florence.disabledLabelNameColour, "; }\n  \n  .florence.syntax > .name.label.disabled:hover { color: ").concat(_florence.disabledLabelNameHoverColour, "; }\n\n  .florence.syntax > .name.reference { color: ").concat(_florence.referenceNameColour, "; }\n  \n  .florence.syntax > .name.reference:hover { color: ").concat(_florence.referenceNameHoverColour, "; }\n\n  .florence.syntax > .name.reference.faulty { color: ").concat(_florence.faultyReferenceNameColour, "; }\n  \n  .florence.syntax > .name.reference.faulty:hover { color: ").concat(_florence.faultyReferenceNameHoverColour, "; }\n\n  .florence.syntax > .name.reference.disabled { color: ").concat(_florence.disabledReferenceNameColour, "; }\n  \n  .florence.syntax > .name.reference.disabled:hover { color: ").concat(_florence.disabledReferenceNameHoverColour, "; }\n\n");
var _default = florenceSyntaxStyle;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvZmxvcmVuY2UuanMiXSwibmFtZXMiOlsiY3VzdG9tQ29sb3VyIiwic3BlY2lhbENvbG91ciIsImNvbW1lbnRDb2xvdXIiLCJrZXl3b3JkQ29sb3VyIiwicmVzZXJ2ZWRDb2xvdXIiLCJzdHJpbmdMaXRlcmFsQ29sb3VyIiwidHlwZU5hbWVDb2xvdXIiLCJjb250ZXh0TmFtZUNvbG91ciIsInZhcmlhYmxlTmFtZUNvbG91ciIsIm1ldGF2YXJpYWJsZU5hbWVDb2xvdXIiLCJsYWJlbE5hbWVDb2xvdXIiLCJsYWJlbE5hbWVIb3ZlckNvbG91ciIsImZhdWx0eUxhYmVsTmFtZUNvbG91ciIsImZhdWx0eUxhYmVsTmFtZUhvdmVyQ29sb3VyIiwiZGlzYWJsZWRMYWJlbE5hbWVDb2xvdXIiLCJkaXNhYmxlZExhYmVsTmFtZUhvdmVyQ29sb3VyIiwicmVmZXJlbmNlTmFtZUNvbG91ciIsInJlZmVyZW5jZU5hbWVIb3ZlckNvbG91ciIsImZhdWx0eVJlZmVyZW5jZU5hbWVDb2xvdXIiLCJmYXVsdHlSZWZlcmVuY2VOYW1lSG92ZXJDb2xvdXIiLCJkaXNhYmxlZFJlZmVyZW5jZU5hbWVDb2xvdXIiLCJkaXNhYmxlZFJlZmVyZW5jZU5hbWVIb3ZlckNvbG91ciIsImZsb3JlbmNlU3ludGF4U3R5bGUiXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7O0FBdUJxQyxHQUE4QixDQUE5QixTQUE4QjtBQUUvRSxHQUFLLENBQUMsbUJBQW1CLElBQUksMENBRVMsRUFFRyxNQUFhLENBTkwsU0FBOEIsZ0JBSTFCLGdEQUVkLEdBRUUsTUFBYSxDQVJMLFNBQThCLGlCQU14QixnREFFaEIsR0FFRSxNQUFhLENBVkwsU0FBOEIsaUJBUXhCLGdEQUVoQixHQUVHLE1BQWMsQ0FaUCxTQUE4QixpQkFVeEIsaURBRWYsR0FFUSxNQUFtQixDQWRsQixTQUE4QixrQkFZdEIsdURBRVgsR0FFSCxNQUFjLENBaEJSLFNBQThCLHVCQWNYLGdEQUUzQixHQUVLLE1BQWlCLENBbEJkLFNBQThCLGtCQWdCckIsbURBRWQsR0FFRyxNQUFrQixDQXBCaEIsU0FBOEIscUJBa0JmLG9EQUVuQixHQUVNLE1BQXNCLENBdEJ4QixTQUE4QixzQkFvQmIsd0RBRWpCLEdBRUwsTUFBZSxDQXhCVixTQUE4QiwwQkFzQkwsbURBRWhDLEdBRVEsTUFBb0IsQ0ExQnJCLFNBQThCLG1CQXdCbkIseURBRVosR0FFRyxNQUFxQixDQTVCdkIsU0FBOEIsd0JBMEJSLHdEQUV0QixHQUVRLE1BQTBCLENBOUJsQyxTQUE4Qix5QkE0Qk4sZ0VBRWxCLEdBRUYsTUFBdUIsQ0FoQzNCLFNBQThCLDhCQThCSywwREFFakMsR0FFUSxNQUE0QixDQWxDdEMsU0FBOEIsMkJBZ0NGLGtFQUVwQixHQUVULE1BQW1CLENBcENsQixTQUE4QixnQ0FrQ1MscURBRTFDLEdBRVEsTUFBd0IsQ0F0QzdCLFNBQThCLHVCQW9DWCw2REFFaEIsR0FFRyxNQUF5QixDQXhDL0IsU0FBOEIsNEJBc0NBLDREQUUxQixHQUVRLE1BQThCLENBMUMxQyxTQUE4Qiw2QkF3Q0Usb0VBRXRCLEdBRUYsTUFBMkIsQ0E1Q25DLFNBQThCLGtDQTBDYSw4REFFckMsR0FFUSxNQUFnQyxDQTlDOUMsU0FBOEIsK0JBNENNLHNFQUV4QixHQUFtQyxNQUVoRyxDQWhEaUQsU0FBOEIsb0NBOENpQixPQUVoRztlQUVlLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBjdXN0b21Db2xvdXIsXG4gICAgICAgICBzcGVjaWFsQ29sb3VyLFxuICAgICAgICAgY29tbWVudENvbG91cixcbiAgICAgICAgIGtleXdvcmRDb2xvdXIsXG4gICAgICAgICByZXNlcnZlZENvbG91cixcbiAgICAgICAgIHN0cmluZ0xpdGVyYWxDb2xvdXIsXG4gICAgICAgICB0eXBlTmFtZUNvbG91cixcbiAgICAgICAgIGNvbnRleHROYW1lQ29sb3VyLFxuICAgICAgICAgdmFyaWFibGVOYW1lQ29sb3VyLFxuICAgICAgICAgbWV0YXZhcmlhYmxlTmFtZUNvbG91cixcbiAgICAgICAgIGxhYmVsTmFtZUNvbG91cixcbiAgICAgICAgIGxhYmVsTmFtZUhvdmVyQ29sb3VyLFxuICAgICAgICAgZmF1bHR5TGFiZWxOYW1lQ29sb3VyLFxuICAgICAgICAgZmF1bHR5TGFiZWxOYW1lSG92ZXJDb2xvdXIsXG4gICAgICAgICBkaXNhYmxlZExhYmVsTmFtZUNvbG91cixcbiAgICAgICAgIGRpc2FibGVkTGFiZWxOYW1lSG92ZXJDb2xvdXIsXG4gICAgICAgICByZWZlcmVuY2VOYW1lQ29sb3VyLFxuICAgICAgICAgcmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyLFxuICAgICAgICAgZmF1bHR5UmVmZXJlbmNlTmFtZUNvbG91cixcbiAgICAgICAgIGZhdWx0eVJlZmVyZW5jZU5hbWVIb3ZlckNvbG91cixcbiAgICAgICAgIGRpc2FibGVkUmVmZXJlbmNlTmFtZUNvbG91cixcbiAgICAgICAgIGRpc2FibGVkUmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyIH0gZnJvbSBcIi4uLy4uL3NjaGVtZS9zeW50YXgvZmxvcmVuY2VcIjtcblxuY29uc3QgZmxvcmVuY2VTeW50YXhTdHlsZSA9IGBcblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLmN1c3RvbSB7IGNvbG9yOiAke2N1c3RvbUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiAuc3BlY2lhbCB7IGNvbG9yOiAke3NwZWNpYWxDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLmNvbW1lbnQgeyBjb2xvcjogJHtjb21tZW50Q29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5rZXl3b3JkIHsgY29sb3I6ICR7a2V5d29yZENvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiAucmVzZXJ2ZWQgeyBjb2xvcjogJHtyZXNlcnZlZENvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiAuc3RyaW5nLWxpdGVyYWwgeyBjb2xvcjogJHtzdHJpbmdMaXRlcmFsQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS50eXBlIHsgY29sb3I6ICR7dHlwZU5hbWVDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLmNvbnRleHQgeyBjb2xvcjogJHtjb250ZXh0TmFtZUNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUudmFyaWFibGUgeyBjb2xvcjogJHt2YXJpYWJsZU5hbWVDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLm1ldGF2YXJpYWJsZSB7IGNvbG9yOiAke21ldGF2YXJpYWJsZU5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUubGFiZWwgeyBjb2xvcjogJHtsYWJlbE5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUubGFiZWw6aG92ZXIgeyBjb2xvcjogJHtsYWJlbE5hbWVIb3ZlckNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUubGFiZWwuZmF1bHR5IHsgY29sb3I6ICR7ZmF1bHR5TGFiZWxOYW1lQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLmxhYmVsLmZhdWx0eTpob3ZlciB7IGNvbG9yOiAke2ZhdWx0eUxhYmVsTmFtZUhvdmVyQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS5sYWJlbC5kaXNhYmxlZCB7IGNvbG9yOiAke2Rpc2FibGVkTGFiZWxOYW1lQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLmxhYmVsLmRpc2FibGVkOmhvdmVyIHsgY29sb3I6ICR7ZGlzYWJsZWRMYWJlbE5hbWVIb3ZlckNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUucmVmZXJlbmNlIHsgY29sb3I6ICR7cmVmZXJlbmNlTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS5yZWZlcmVuY2U6aG92ZXIgeyBjb2xvcjogJHtyZWZlcmVuY2VOYW1lSG92ZXJDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLnJlZmVyZW5jZS5mYXVsdHkgeyBjb2xvcjogJHtmYXVsdHlSZWZlcmVuY2VOYW1lQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLnJlZmVyZW5jZS5mYXVsdHk6aG92ZXIgeyBjb2xvcjogJHtmYXVsdHlSZWZlcmVuY2VOYW1lSG92ZXJDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLnJlZmVyZW5jZS5kaXNhYmxlZCB7IGNvbG9yOiAke2Rpc2FibGVkUmVmZXJlbmNlTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS5yZWZlcmVuY2UuZGlzYWJsZWQ6aG92ZXIgeyBjb2xvcjogJHtkaXNhYmxlZFJlZmVyZW5jZU5hbWVIb3ZlckNvbG91cn07IH1cblxuYDtcblxuZXhwb3J0IGRlZmF1bHQgZmxvcmVuY2VTeW50YXhTdHlsZTtcbiJdfQ==