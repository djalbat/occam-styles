"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _florence = require("../../scheme/syntax/florence");
var florenceSyntaxStyle = "\n\n  .florence.syntax > div > .type { color: ".concat(_florence.typeColour, "; }\n\n  .florence.syntax > div > .special { color: ").concat(_florence.specialColour, "; }\n  \n  .florence.syntax > div > .comment { color: ").concat(_default.commentColour, "; }\n  \n  .florence.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .florence.syntax > div > .operator { color: ").concat(_florence.operatorColour, "; }\n  \n  .florence.syntax > div > .meta-type { color: ").concat(_florence.metaTypeColour, "; }\n\n  .florence.syntax > div > .primary-keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > div > .secondary-keyword { color: ").concat(_florence.keywordColour, "; }\n  \n  .florence.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n\n  .florence.syntax > div > .context { color: ").concat(_florence.contextColour, "; }\n\n  .florence.syntax > div > .label { color: ").concat(_florence.labelColour, "; }\n  \n  .florence.syntax > div > .label:hover { color: ").concat(_florence.labelHoverColour, "; }\n\n  .florence.syntax > div > .label:disabled { color: ").concat(_florence.disabledLabelColour, "; }\n  \n  .florence.syntax > div > .reference { color: ").concat(_florence.referenceColour, "; }\n  \n  .florence.syntax > div > .reference:hover { color: ").concat(_florence.referenceHoverColour, "; }\n\n  .florence.syntax > div > .reference:disabled { color: ").concat(_florence.disabledReferenceColour, "; }\n  \n  .florence.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = florenceSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvZmxvcmVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGVycm9yQ29sb3VyLCBjb21tZW50Q29sb3VyLCBub25zZW5zZUNvbG91ciwgc3RyaW5nTGl0ZXJhbENvbG91ciwgZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L2RlZmF1bHRcIjtcbmltcG9ydCB7IHR5cGVDb2xvdXIsXG4gICAgICAgICBzcGVjaWFsQ29sb3VyLFxuICAgICAgICAga2V5d29yZENvbG91cixcbiAgICAgICAgIG9wZXJhdG9yQ29sb3VyLFxuICAgICAgICAgbWV0YVR5cGVDb2xvdXIsXG4gICAgICAgICBsYWJlbENvbG91cixcbiAgICAgICAgIGNvbnRleHRDb2xvdXIsXG4gICAgICAgICByZWZlcmVuY2VDb2xvdXIsXG4gICAgICAgICBsYWJlbEhvdmVyQ29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRMYWJlbENvbG91cixcbiAgICAgICAgIHJlZmVyZW5jZUhvdmVyQ29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRSZWZlcmVuY2VDb2xvdXIgfSBmcm9tIFwiLi4vLi4vc2NoZW1lL3N5bnRheC9mbG9yZW5jZVwiO1xuXG5jb25zdCBmbG9yZW5jZVN5bnRheFN0eWxlID0gYFxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAudHlwZSB7IGNvbG9yOiAke3R5cGVDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5zcGVjaWFsIHsgY29sb3I6ICR7c3BlY2lhbENvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAuY29tbWVudCB7IGNvbG9yOiAke2NvbW1lbnRDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLm5vbnNlbnNlIHsgY29sb3I6ICR7bm9uc2Vuc2VDb2xvdXJ9OyB9IFxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAub3BlcmF0b3IgeyBjb2xvcjogJHtvcGVyYXRvckNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubWV0YS10eXBlIHsgY29sb3I6ICR7bWV0YVR5cGVDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5wcmltYXJ5LWtleXdvcmQgeyBjb2xvcjogJHtrZXl3b3JkQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5zZWNvbmRhcnkta2V5d29yZCB7IGNvbG9yOiAke2tleXdvcmRDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLnN0cmluZy1saXRlcmFsIHsgY29sb3I6ICR7c3RyaW5nTGl0ZXJhbENvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLmNvbnRleHQgeyBjb2xvcjogJHtjb250ZXh0Q29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubGFiZWwgeyBjb2xvcjogJHtsYWJlbENvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubGFiZWw6aG92ZXIgeyBjb2xvcjogJHtsYWJlbEhvdmVyQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAubGFiZWw6ZGlzYWJsZWQgeyBjb2xvcjogJHtkaXNhYmxlZExhYmVsQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IGRpdiA+IC5yZWZlcmVuY2UgeyBjb2xvcjogJHtyZWZlcmVuY2VDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLnJlZmVyZW5jZTpob3ZlciB7IGNvbG9yOiAke3JlZmVyZW5jZUhvdmVyQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiBkaXYgPiAucmVmZXJlbmNlOmRpc2FibGVkIHsgY29sb3I6ICR7ZGlzYWJsZWRSZWZlcmVuY2VDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gZGl2ID4gLmVycm9yIHtcbiAgICBjb2xvcjogJHtlcnJvckNvbG91cn07XG4gICAgdGV4dC1kZWNvcmF0aW9uLWxpbmU6IHVuZGVybGluZTtcbiAgICB0ZXh0LWRlY29yYXRpb24tY29sb3I6ICR7ZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91cn07XG4gIH0gXG5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGZsb3JlbmNlU3ludGF4U3R5bGU7XG4iXSwibmFtZXMiOlsiZmxvcmVuY2VTeW50YXhTdHlsZSIsInNwZWNpYWxDb2xvdXIiLCJ0eXBlQ29sb3VyIiwiY29tbWVudENvbG91ciIsIm5vbnNlbnNlQ29sb3VyIiwib3BlcmF0b3JDb2xvdXIiLCJtZXRhVHlwZUNvbG91ciIsImtleXdvcmRDb2xvdXIiLCJzdHJpbmdMaXRlcmFsQ29sb3VyIiwiY29udGV4dENvbG91ciIsImxhYmVsQ29sb3VyIiwibGFiZWxIb3ZlckNvbG91ciIsImRpc2FibGVkTGFiZWxDb2xvdXIiLCJyZWZlcmVuY2VDb2xvdXIiLCJyZWZlcmVuY2VIb3ZlckNvbG91ciIsImRpc2FibGVkUmVmZXJlbmNlQ29sb3VyIiwiZXJyb3JDb2xvdXIiLCJlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkEwREE7OztlQUFBOzs7dUJBeEQyRzt3QkFZbkU7QUFFeEMsSUFBTUEsc0JBQXNCLEFBQUMsaURBSWtCQyxPQUZIQyxvQkFBVSxFQUFDLHdEQUlSQyxPQUZBRix1QkFBYSxFQUFDLDBEQUliRyxPQUZERCxzQkFBYSxFQUFDLDJEQUliRSxPQUZBRCx1QkFBYyxFQUFDLDBEQUlkRSxPQUZERCx3QkFBYyxFQUFDLDREQUlSRSxPQUZORCx3QkFBYyxFQUFDLGdFQUlQQyxPQUZGQSx1QkFBYSxFQUFDLG9FQUlmQyxPQUZHRCx1QkFBYSxFQUFDLGlFQUl4QkUsT0FGT0QsNEJBQW1CLEVBQUMsd0RBSTdCRSxPQUZFRCx1QkFBYSxFQUFDLHNEQUlWRSxPQUZORCxxQkFBVyxFQUFDLDhEQUlIRSxPQUZIRCwwQkFBZ0IsRUFBQywrREFJbkJFLE9BRktELDZCQUFtQixFQUFDLDREQUluQkUsT0FGTkQseUJBQWUsRUFBQyxrRUFJUEUsT0FGSEQsOEJBQW9CLEVBQUMsbUVBSy9ERSxPQUg2Q0QsaUNBQXVCLEVBQUMsNkRBS3JERSxPQUZoQkQsb0JBQVcsRUFBQyx3RUFFOEIsT0FBMUJDLGtDQUF5QixFQUFDO0lBS3ZELFlBQWVqQiJ9