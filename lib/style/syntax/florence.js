"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _occamColours = require("occam-colours");

var customColour = _occamColours.florenceSyntaxScheme.customColour,
    commentColour = _occamColours.florenceSyntaxScheme.commentColour,
    keywordColour = _occamColours.florenceSyntaxScheme.keywordColour,
    stringLiteralColour = _occamColours.florenceSyntaxScheme.stringLiteralColour,
    typeNameColour = _occamColours.florenceSyntaxScheme.typeNameColour,
    contextNameColour = _occamColours.florenceSyntaxScheme.contextNameColour,
    variableNameColour = _occamColours.florenceSyntaxScheme.variableNameColour,
    metavariableNameColour = _occamColours.florenceSyntaxScheme.metavariableNameColour,
    labelNameColour = _occamColours.florenceSyntaxScheme.labelNameColour,
    labelNameHoverColour = _occamColours.florenceSyntaxScheme.labelNameHoverColour,
    faultyLabelNameColour = _occamColours.florenceSyntaxScheme.faultyLabelNameColour,
    faultyLabelNameHoverColour = _occamColours.florenceSyntaxScheme.faultyLabelNameHoverColour,
    disabledLabelNameColour = _occamColours.florenceSyntaxScheme.disabledLabelNameColour,
    disabledLabelNameHoverColour = _occamColours.florenceSyntaxScheme.disabledLabelNameHoverColour,
    referenceNameColour = _occamColours.florenceSyntaxScheme.referenceNameColour,
    referenceNameHoverColour = _occamColours.florenceSyntaxScheme.referenceNameHoverColour,
    faultyReferenceNameColour = _occamColours.florenceSyntaxScheme.faultyReferenceNameColour,
    faultyReferenceNameHoverColour = _occamColours.florenceSyntaxScheme.faultyReferenceNameHoverColour,
    disabledReferenceNameColour = _occamColours.florenceSyntaxScheme.disabledReferenceNameColour,
    disabledReferenceNameHoverColour = _occamColours.florenceSyntaxScheme.disabledReferenceNameHoverColour;
var florenceSyntaxStyle = "\n\n  .florence.syntax > .custom { color: ".concat(customColour, "; }\n  \n  .florence.syntax > .comment { color: ").concat(commentColour, "; }\n  \n  .florence.syntax > .keyword { color: ").concat(keywordColour, "; }\n  \n  .florence.syntax > .string-literal { color: ").concat(stringLiteralColour, "; }\n\n  .florence.syntax > .name.type { color: ").concat(typeNameColour, "; }\n\n  .florence.syntax > .name.context { color: ").concat(contextNameColour, "; }\n\n  .florence.syntax > .name.variable { color: ").concat(variableNameColour, "; }\n\n  .florence.syntax > .name.metavariable { color: ").concat(metavariableNameColour, "; }\n  \n  .florence.syntax > .name.label { color: ").concat(labelNameColour, "; }\n  \n  .florence.syntax > .name.label:hover { color: ").concat(labelNameHoverColour, "; }\n\n  .florence.syntax > .name.label.faulty { color: ").concat(faultyLabelNameColour, "; }\n  \n  .florence.syntax > .name.label.faulty:hover { color: ").concat(faultyLabelNameHoverColour, "; }\n\n  .florence.syntax > .name.label.disabled { color: ").concat(disabledLabelNameColour, "; }\n  \n  .florence.syntax > .name.label.disabled:hover { color: ").concat(disabledLabelNameHoverColour, "; }\n\n  .florence.syntax > .name.reference { color: ").concat(referenceNameColour, "; }\n  \n  .florence.syntax > .name.reference:hover { color: ").concat(referenceNameHoverColour, "; }\n\n  .florence.syntax > .name.reference.faulty { color: ").concat(faultyReferenceNameColour, "; }\n  \n  .florence.syntax > .name.reference.faulty:hover { color: ").concat(faultyReferenceNameHoverColour, "; }\n\n  .florence.syntax > .name.reference.disabled { color: ").concat(disabledReferenceNameColour, "; }\n  \n  .florence.syntax > .name.reference.disabled:hover { color: ").concat(disabledReferenceNameHoverColour, "; }\n\n");
var _default = florenceSyntaxStyle;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZsb3JlbmNlLmpzIl0sIm5hbWVzIjpbImN1c3RvbUNvbG91ciIsImZsb3JlbmNlU3ludGF4U2NoZW1lIiwiY29tbWVudENvbG91ciIsImtleXdvcmRDb2xvdXIiLCJzdHJpbmdMaXRlcmFsQ29sb3VyIiwidHlwZU5hbWVDb2xvdXIiLCJjb250ZXh0TmFtZUNvbG91ciIsInZhcmlhYmxlTmFtZUNvbG91ciIsIm1ldGF2YXJpYWJsZU5hbWVDb2xvdXIiLCJsYWJlbE5hbWVDb2xvdXIiLCJsYWJlbE5hbWVIb3ZlckNvbG91ciIsImZhdWx0eUxhYmVsTmFtZUNvbG91ciIsImZhdWx0eUxhYmVsTmFtZUhvdmVyQ29sb3VyIiwiZGlzYWJsZWRMYWJlbE5hbWVDb2xvdXIiLCJkaXNhYmxlZExhYmVsTmFtZUhvdmVyQ29sb3VyIiwicmVmZXJlbmNlTmFtZUNvbG91ciIsInJlZmVyZW5jZU5hbWVIb3ZlckNvbG91ciIsImZhdWx0eVJlZmVyZW5jZU5hbWVDb2xvdXIiLCJmYXVsdHlSZWZlcmVuY2VOYW1lSG92ZXJDb2xvdXIiLCJkaXNhYmxlZFJlZmVyZW5jZU5hbWVDb2xvdXIiLCJkaXNhYmxlZFJlZmVyZW5jZU5hbWVIb3ZlckNvbG91ciIsImZsb3JlbmNlU3ludGF4U3R5bGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUE7O0lBRVFBLFksR0FtQnFDQyxrQyxDQW5CckNELFk7SUFDQUUsYSxHQWtCcUNELGtDLENBbEJyQ0MsYTtJQUNBQyxhLEdBaUJxQ0Ysa0MsQ0FqQnJDRSxhO0lBQ0FDLG1CLEdBZ0JxQ0gsa0MsQ0FoQnJDRyxtQjtJQUNBQyxjLEdBZXFDSixrQyxDQWZyQ0ksYztJQUNBQyxpQixHQWNxQ0wsa0MsQ0FkckNLLGlCO0lBQ0FDLGtCLEdBYXFDTixrQyxDQWJyQ00sa0I7SUFDQUMsc0IsR0FZcUNQLGtDLENBWnJDTyxzQjtJQUNBQyxlLEdBV3FDUixrQyxDQVhyQ1EsZTtJQUNBQyxvQixHQVVxQ1Qsa0MsQ0FWckNTLG9CO0lBQ0FDLHFCLEdBU3FDVixrQyxDQVRyQ1UscUI7SUFDQUMsMEIsR0FRcUNYLGtDLENBUnJDVywwQjtJQUNBQyx1QixHQU9xQ1osa0MsQ0FQckNZLHVCO0lBQ0FDLDRCLEdBTXFDYixrQyxDQU5yQ2EsNEI7SUFDQUMsbUIsR0FLcUNkLGtDLENBTHJDYyxtQjtJQUNBQyx3QixHQUlxQ2Ysa0MsQ0FKckNlLHdCO0lBQ0FDLHlCLEdBR3FDaEIsa0MsQ0FIckNnQix5QjtJQUNBQyw4QixHQUVxQ2pCLGtDLENBRnJDaUIsOEI7SUFDQUMsMkIsR0FDcUNsQixrQyxDQURyQ2tCLDJCO0lBQ0FDLGdDLEdBQXFDbkIsa0MsQ0FBckNtQixnQztBQUVSLElBQU1DLG1CQUFtQix1REFFZXJCLFlBRmYsNkRBSWdCRSxhQUpoQiw2REFNZ0JDLGFBTmhCLG9FQVF1QkMsbUJBUnZCLDZEQVVrQkMsY0FWbEIsZ0VBWXFCQyxpQkFackIsaUVBY3NCQyxrQkFkdEIscUVBZ0IwQkMsc0JBaEIxQixnRUFrQm1CQyxlQWxCbkIsc0VBb0J5QkMsb0JBcEJ6QixxRUFzQjBCQyxxQkF0QjFCLDZFQXdCZ0NDLDBCQXhCaEMsdUVBMEI0QkMsdUJBMUI1QiwrRUE0QmtDQyw0QkE1QmxDLGtFQThCdUJDLG1CQTlCdkIsMEVBZ0M2QkMsd0JBaEM3Qix5RUFrQzhCQyx5QkFsQzlCLGlGQW9Db0NDLDhCQXBDcEMsMkVBc0NnQ0MsMkJBdENoQyxtRkF3Q3NDQyxnQ0F4Q3RDLFlBQXpCO2VBNENlQyxtQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBmbG9yZW5jZVN5bnRheFNjaGVtZSB9IGZyb20gXCJvY2NhbS1jb2xvdXJzXCI7XG5cbmNvbnN0IHsgY3VzdG9tQ29sb3VyLFxuICAgICAgICBjb21tZW50Q29sb3VyLFxuICAgICAgICBrZXl3b3JkQ29sb3VyLFxuICAgICAgICBzdHJpbmdMaXRlcmFsQ29sb3VyLFxuICAgICAgICB0eXBlTmFtZUNvbG91cixcbiAgICAgICAgY29udGV4dE5hbWVDb2xvdXIsXG4gICAgICAgIHZhcmlhYmxlTmFtZUNvbG91cixcbiAgICAgICAgbWV0YXZhcmlhYmxlTmFtZUNvbG91cixcbiAgICAgICAgbGFiZWxOYW1lQ29sb3VyLFxuICAgICAgICBsYWJlbE5hbWVIb3ZlckNvbG91cixcbiAgICAgICAgZmF1bHR5TGFiZWxOYW1lQ29sb3VyLFxuICAgICAgICBmYXVsdHlMYWJlbE5hbWVIb3ZlckNvbG91cixcbiAgICAgICAgZGlzYWJsZWRMYWJlbE5hbWVDb2xvdXIsXG4gICAgICAgIGRpc2FibGVkTGFiZWxOYW1lSG92ZXJDb2xvdXIsXG4gICAgICAgIHJlZmVyZW5jZU5hbWVDb2xvdXIsXG4gICAgICAgIHJlZmVyZW5jZU5hbWVIb3ZlckNvbG91cixcbiAgICAgICAgZmF1bHR5UmVmZXJlbmNlTmFtZUNvbG91cixcbiAgICAgICAgZmF1bHR5UmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyLFxuICAgICAgICBkaXNhYmxlZFJlZmVyZW5jZU5hbWVDb2xvdXIsXG4gICAgICAgIGRpc2FibGVkUmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyIH0gPSBmbG9yZW5jZVN5bnRheFNjaGVtZTtcblxuY29uc3QgZmxvcmVuY2VTeW50YXhTdHlsZSA9IGBcblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLmN1c3RvbSB7IGNvbG9yOiAke2N1c3RvbUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiAuY29tbWVudCB7IGNvbG9yOiAke2NvbW1lbnRDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLmtleXdvcmQgeyBjb2xvcjogJHtrZXl3b3JkQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5zdHJpbmctbGl0ZXJhbCB7IGNvbG9yOiAke3N0cmluZ0xpdGVyYWxDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLnR5cGUgeyBjb2xvcjogJHt0eXBlTmFtZUNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUuY29udGV4dCB7IGNvbG9yOiAke2NvbnRleHROYW1lQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS52YXJpYWJsZSB7IGNvbG9yOiAke3ZhcmlhYmxlTmFtZUNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUubWV0YXZhcmlhYmxlIHsgY29sb3I6ICR7bWV0YXZhcmlhYmxlTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS5sYWJlbCB7IGNvbG9yOiAke2xhYmVsTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS5sYWJlbDpob3ZlciB7IGNvbG9yOiAke2xhYmVsTmFtZUhvdmVyQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS5sYWJlbC5mYXVsdHkgeyBjb2xvcjogJHtmYXVsdHlMYWJlbE5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUubGFiZWwuZmF1bHR5OmhvdmVyIHsgY29sb3I6ICR7ZmF1bHR5TGFiZWxOYW1lSG92ZXJDb2xvdXJ9OyB9XG5cbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLmxhYmVsLmRpc2FibGVkIHsgY29sb3I6ICR7ZGlzYWJsZWRMYWJlbE5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUubGFiZWwuZGlzYWJsZWQ6aG92ZXIgeyBjb2xvcjogJHtkaXNhYmxlZExhYmVsTmFtZUhvdmVyQ29sb3VyfTsgfVxuXG4gIC5mbG9yZW5jZS5zeW50YXggPiAubmFtZS5yZWZlcmVuY2UgeyBjb2xvcjogJHtyZWZlcmVuY2VOYW1lQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLnJlZmVyZW5jZTpob3ZlciB7IGNvbG9yOiAke3JlZmVyZW5jZU5hbWVIb3ZlckNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUucmVmZXJlbmNlLmZhdWx0eSB7IGNvbG9yOiAke2ZhdWx0eVJlZmVyZW5jZU5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUucmVmZXJlbmNlLmZhdWx0eTpob3ZlciB7IGNvbG9yOiAke2ZhdWx0eVJlZmVyZW5jZU5hbWVIb3ZlckNvbG91cn07IH1cblxuICAuZmxvcmVuY2Uuc3ludGF4ID4gLm5hbWUucmVmZXJlbmNlLmRpc2FibGVkIHsgY29sb3I6ICR7ZGlzYWJsZWRSZWZlcmVuY2VOYW1lQ29sb3VyfTsgfVxuICBcbiAgLmZsb3JlbmNlLnN5bnRheCA+IC5uYW1lLnJlZmVyZW5jZS5kaXNhYmxlZDpob3ZlciB7IGNvbG9yOiAke2Rpc2FibGVkUmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyfTsgfVxuXG5gO1xuXG5leHBvcnQgZGVmYXVsdCBmbG9yZW5jZVN5bnRheFN0eWxlO1xuIl19