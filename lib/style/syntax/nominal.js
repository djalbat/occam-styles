"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _nominal = require("../../scheme/syntax/nominal");
var nominalSyntaxStyle = "\n\n  .nominal.syntax > div > .type { color: ".concat(_nominal.typeColour, "; }\n\n  .nominal.syntax > div > .bracket { color: ").concat(_nominal.bracketColour, "; }\n  \n  .nominal.syntax > div > .special { color: ").concat(_nominal.specialColour, "; }\n  \n  .nominal.syntax > div > .comment { color: ").concat(_default.commentColour, "; }\n  \n  .nominal.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .nominal.syntax > div > .operator { color: ").concat(_nominal.operatorColour, "; }\n  \n  .nominal.syntax > div > .context { color: ").concat(_nominal.contextColour, "; }\n\n  .nominal.syntax > div > .meta-type { color: ").concat(_nominal.metaTypeColour, "; }\n\n  .nominal.syntax > div > .primary-keyword { color: ").concat(_nominal.keywordColour, "; }\n  \n  .nominal.syntax > div > .secondary-keyword { color: ").concat(_nominal.keywordColour, "; }\n  \n  .nominal.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n\n  .nominal.syntax > div > .label { color: ").concat(_nominal.labelColour, "; }\n  \n  .nominal.syntax > div > .label:hover { color: ").concat(_nominal.labelHoverColour, "; }\n\n  .nominal.syntax > div > .label:disabled { color: ").concat(_nominal.disabledLabelColour, "; }\n  \n  .nominal.syntax > div > .reference { color: ").concat(_nominal.referenceColour, "; }\n  \n  .nominal.syntax > div > .reference:hover { color: ").concat(_nominal.referenceHoverColour, "; }\n\n  .nominal.syntax > div > .reference:disabled { color: ").concat(_nominal.disabledReferenceColour, "; }\n  \n  .nominal.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = nominalSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvbm9taW5hbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZXJyb3JDb2xvdXIsIGNvbW1lbnRDb2xvdXIsIG5vbnNlbnNlQ29sb3VyLCBzdHJpbmdMaXRlcmFsQ29sb3VyLCBlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIH0gZnJvbSBcIi4uLy4uL3NjaGVtZS9zeW50YXgvZGVmYXVsdFwiO1xuaW1wb3J0IHsgdHlwZUNvbG91cixcbiAgICAgICAgIGxhYmVsQ29sb3VyLFxuICAgICAgICAgYnJhY2tldENvbG91cixcbiAgICAgICAgIHNwZWNpYWxDb2xvdXIsXG4gICAgICAgICBrZXl3b3JkQ29sb3VyLFxuICAgICAgICAgY29udGV4dENvbG91cixcbiAgICAgICAgIG9wZXJhdG9yQ29sb3VyLFxuICAgICAgICAgbWV0YVR5cGVDb2xvdXIsXG4gICAgICAgICByZWZlcmVuY2VDb2xvdXIsXG4gICAgICAgICBsYWJlbEhvdmVyQ29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRMYWJlbENvbG91cixcbiAgICAgICAgIHJlZmVyZW5jZUhvdmVyQ29sb3VyLFxuICAgICAgICAgZGlzYWJsZWRSZWZlcmVuY2VDb2xvdXIgfSBmcm9tIFwiLi4vLi4vc2NoZW1lL3N5bnRheC9ub21pbmFsXCI7XG5cbmNvbnN0IG5vbWluYWxTeW50YXhTdHlsZSA9IGBcblxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAudHlwZSB7IGNvbG9yOiAke3R5cGVDb2xvdXJ9OyB9XG5cbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLmJyYWNrZXQgeyBjb2xvcjogJHticmFja2V0Q29sb3VyfTsgfVxuICBcbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLnNwZWNpYWwgeyBjb2xvcjogJHtzcGVjaWFsQ29sb3VyfTsgfVxuICBcbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLmNvbW1lbnQgeyBjb2xvcjogJHtjb21tZW50Q29sb3VyfTsgfVxuICBcbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLm5vbnNlbnNlIHsgY29sb3I6ICR7bm9uc2Vuc2VDb2xvdXJ9OyB9IFxuXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5vcGVyYXRvciB7IGNvbG9yOiAke29wZXJhdG9yQ29sb3VyfTsgfVxuICBcbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLmNvbnRleHQgeyBjb2xvcjogJHtjb250ZXh0Q29sb3VyfTsgfVxuXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5tZXRhLXR5cGUgeyBjb2xvcjogJHttZXRhVHlwZUNvbG91cn07IH1cblxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAucHJpbWFyeS1rZXl3b3JkIHsgY29sb3I6ICR7a2V5d29yZENvbG91cn07IH1cbiAgXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5zZWNvbmRhcnkta2V5d29yZCB7IGNvbG9yOiAke2tleXdvcmRDb2xvdXJ9OyB9XG4gIFxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAuc3RyaW5nLWxpdGVyYWwgeyBjb2xvcjogJHtzdHJpbmdMaXRlcmFsQ29sb3VyfTsgfVxuXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5sYWJlbCB7IGNvbG9yOiAke2xhYmVsQ29sb3VyfTsgfVxuICBcbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLmxhYmVsOmhvdmVyIHsgY29sb3I6ICR7bGFiZWxIb3ZlckNvbG91cn07IH1cblxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAubGFiZWw6ZGlzYWJsZWQgeyBjb2xvcjogJHtkaXNhYmxlZExhYmVsQ29sb3VyfTsgfVxuICBcbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLnJlZmVyZW5jZSB7IGNvbG9yOiAke3JlZmVyZW5jZUNvbG91cn07IH1cbiAgXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5yZWZlcmVuY2U6aG92ZXIgeyBjb2xvcjogJHtyZWZlcmVuY2VIb3ZlckNvbG91cn07IH1cblxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAucmVmZXJlbmNlOmRpc2FibGVkIHsgY29sb3I6ICR7ZGlzYWJsZWRSZWZlcmVuY2VDb2xvdXJ9OyB9XG4gIFxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAuZXJyb3Ige1xuICAgIGNvbG9yOiAke2Vycm9yQ29sb3VyfTtcbiAgICB0ZXh0LWRlY29yYXRpb24tbGluZTogdW5kZXJsaW5lO1xuICAgIHRleHQtZGVjb3JhdGlvbi1jb2xvcjogJHtlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyfTtcbiAgfSBcblxuYDtcblxuZXhwb3J0IGRlZmF1bHQgbm9taW5hbFN5bnRheFN0eWxlO1xuIl0sIm5hbWVzIjpbIm5vbWluYWxTeW50YXhTdHlsZSIsImJyYWNrZXRDb2xvdXIiLCJ0eXBlQ29sb3VyIiwic3BlY2lhbENvbG91ciIsImNvbW1lbnRDb2xvdXIiLCJub25zZW5zZUNvbG91ciIsIm9wZXJhdG9yQ29sb3VyIiwiY29udGV4dENvbG91ciIsIm1ldGFUeXBlQ29sb3VyIiwia2V5d29yZENvbG91ciIsInN0cmluZ0xpdGVyYWxDb2xvdXIiLCJsYWJlbENvbG91ciIsImxhYmVsSG92ZXJDb2xvdXIiLCJkaXNhYmxlZExhYmVsQ29sb3VyIiwicmVmZXJlbmNlQ29sb3VyIiwicmVmZXJlbmNlSG92ZXJDb2xvdXIiLCJkaXNhYmxlZFJlZmVyZW5jZUNvbG91ciIsImVycm9yQ29sb3VyIiwiZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91ciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBNkRBOzs7ZUFBQTs7O3VCQTNEMkc7dUJBYW5FO0FBRXhDLElBQU1BLHFCQUFxQixBQUFDLGdEQUlrQkMsT0FGSEMsbUJBQVUsRUFBQyx1REFJUkMsT0FGQUYsc0JBQWEsRUFBQyx5REFJZEcsT0FGQUQsc0JBQWEsRUFBQyx5REFJYkUsT0FGREQsc0JBQWEsRUFBQywwREFJYkUsT0FGQUQsdUJBQWMsRUFBQyx5REFJaEJFLE9BRkNELHVCQUFjLEVBQUMseURBSWRFLE9BRkZELHNCQUFhLEVBQUMseURBSU5FLE9BRk5ELHVCQUFjLEVBQUMsK0RBSVBDLE9BRkZBLHNCQUFhLEVBQUMsbUVBSWZDLE9BRkdELHNCQUFhLEVBQUMsZ0VBSTFCRSxPQUZTRCw0QkFBbUIsRUFBQyxxREFJdkJFLE9BRk5ELG9CQUFXLEVBQUMsNkRBSUhFLE9BRkhELHlCQUFnQixFQUFDLDhEQUluQkUsT0FGS0QsNEJBQW1CLEVBQUMsMkRBSW5CRSxPQUZORCx3QkFBZSxFQUFDLGlFQUlQRSxPQUZIRCw2QkFBb0IsRUFBQyxrRUFLOURFLE9BSDRDRCxnQ0FBdUIsRUFBQyw0REFLcERFLE9BRmhCRCxvQkFBVyxFQUFDLHdFQUU4QixPQUExQkMsa0NBQXlCLEVBQUM7SUFLdkQsWUFBZWxCIn0=