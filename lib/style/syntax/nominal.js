"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _nominal = require("../../scheme/syntax/nominal");
var nominalSyntaxStyle = "\n\n  .nominal.syntax > div > .type { color: ".concat(_nominal.typeColour, "; }\n\n  .nominal.syntax > div > .special { color: ").concat(_nominal.specialColour, "; }\n  \n  .nominal.syntax > div > .comment { color: ").concat(_default.commentColour, "; }\n  \n  .nominal.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .nominal.syntax > div > .operator { color: ").concat(_nominal.operatorColour, "; }\n  \n  .nominal.syntax > div > .context { color: ").concat(_nominal.contextColour, "; }\n\n  .nominal.syntax > div > .meta-type { color: ").concat(_nominal.metaTypeColour, "; }\n\n  .nominal.syntax > div > .delimiter { color: ").concat(_nominal.delimiterColour, "; }\n  \n  .nominal.syntax > div > .primary-keyword { color: ").concat(_nominal.keywordColour, "; }\n  \n  .nominal.syntax > div > .secondary-keyword { color: ").concat(_nominal.keywordColour, "; }\n  \n  .nominal.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n\n  .nominal.syntax > div > .label-name { color: ").concat(_nominal.labelNameColour, "; }\n  \n  .nominal.syntax > div > .label-name:hover { color: ").concat(_nominal.labelNameHoverColour, "; }\n\n  .nominal.syntax > div > .label-name:disabled { color: ").concat(_nominal.disabledLabelNameColour, "; }\n  \n  .nominal.syntax > div > .reference-name { color: ").concat(_nominal.referenceNameColour, "; }\n  \n  .nominal.syntax > div > .reference-name:hover { color: ").concat(_nominal.referenceNameHoverColour, "; }\n\n  .nominal.syntax > div > .reference-name:disabled { color: ").concat(_nominal.disabledReferenceNameColour, "; }\n  \n  .nominal.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = nominalSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvbm9taW5hbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZXJyb3JDb2xvdXIsIGNvbW1lbnRDb2xvdXIsIG5vbnNlbnNlQ29sb3VyLCBzdHJpbmdMaXRlcmFsQ29sb3VyLCBlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIH0gZnJvbSBcIi4uLy4uL3NjaGVtZS9zeW50YXgvZGVmYXVsdFwiO1xuaW1wb3J0IHsgdHlwZUNvbG91cixcbiAgICAgICAgIHNwZWNpYWxDb2xvdXIsXG4gICAgICAgICBrZXl3b3JkQ29sb3VyLFxuICAgICAgICAgY29udGV4dENvbG91cixcbiAgICAgICAgIG9wZXJhdG9yQ29sb3VyLFxuICAgICAgICAgbWV0YVR5cGVDb2xvdXIsXG4gICAgICAgICBsYWJlbE5hbWVDb2xvdXIsXG4gICAgICAgICBkZWxpbWl0ZXJDb2xvdXIsXG4gICAgICAgICByZWZlcmVuY2VOYW1lQ29sb3VyLFxuICAgICAgICAgbGFiZWxOYW1lSG92ZXJDb2xvdXIsXG4gICAgICAgICBkaXNhYmxlZExhYmVsTmFtZUNvbG91cixcbiAgICAgICAgIHJlZmVyZW5jZU5hbWVIb3ZlckNvbG91cixcbiAgICAgICAgIGRpc2FibGVkUmVmZXJlbmNlTmFtZUNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L25vbWluYWxcIjtcblxuY29uc3Qgbm9taW5hbFN5bnRheFN0eWxlID0gYFxuXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC50eXBlIHsgY29sb3I6ICR7dHlwZUNvbG91cn07IH1cblxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAuc3BlY2lhbCB7IGNvbG9yOiAke3NwZWNpYWxDb2xvdXJ9OyB9XG4gIFxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAuY29tbWVudCB7IGNvbG9yOiAke2NvbW1lbnRDb2xvdXJ9OyB9XG4gIFxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAubm9uc2Vuc2UgeyBjb2xvcjogJHtub25zZW5zZUNvbG91cn07IH0gXG5cbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLm9wZXJhdG9yIHsgY29sb3I6ICR7b3BlcmF0b3JDb2xvdXJ9OyB9XG4gIFxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAuY29udGV4dCB7IGNvbG9yOiAke2NvbnRleHRDb2xvdXJ9OyB9XG5cbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLm1ldGEtdHlwZSB7IGNvbG9yOiAke21ldGFUeXBlQ29sb3VyfTsgfVxuXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5kZWxpbWl0ZXIgeyBjb2xvcjogJHtkZWxpbWl0ZXJDb2xvdXJ9OyB9XG4gIFxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAucHJpbWFyeS1rZXl3b3JkIHsgY29sb3I6ICR7a2V5d29yZENvbG91cn07IH1cbiAgXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5zZWNvbmRhcnkta2V5d29yZCB7IGNvbG9yOiAke2tleXdvcmRDb2xvdXJ9OyB9XG4gIFxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAuc3RyaW5nLWxpdGVyYWwgeyBjb2xvcjogJHtzdHJpbmdMaXRlcmFsQ29sb3VyfTsgfVxuXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5sYWJlbC1uYW1lIHsgY29sb3I6ICR7bGFiZWxOYW1lQ29sb3VyfTsgfVxuICBcbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLmxhYmVsLW5hbWU6aG92ZXIgeyBjb2xvcjogJHtsYWJlbE5hbWVIb3ZlckNvbG91cn07IH1cblxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAubGFiZWwtbmFtZTpkaXNhYmxlZCB7IGNvbG9yOiAke2Rpc2FibGVkTGFiZWxOYW1lQ29sb3VyfTsgfVxuICBcbiAgLm5vbWluYWwuc3ludGF4ID4gZGl2ID4gLnJlZmVyZW5jZS1uYW1lIHsgY29sb3I6ICR7cmVmZXJlbmNlTmFtZUNvbG91cn07IH1cbiAgXG4gIC5ub21pbmFsLnN5bnRheCA+IGRpdiA+IC5yZWZlcmVuY2UtbmFtZTpob3ZlciB7IGNvbG9yOiAke3JlZmVyZW5jZU5hbWVIb3ZlckNvbG91cn07IH1cblxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAucmVmZXJlbmNlLW5hbWU6ZGlzYWJsZWQgeyBjb2xvcjogJHtkaXNhYmxlZFJlZmVyZW5jZU5hbWVDb2xvdXJ9OyB9XG4gIFxuICAubm9taW5hbC5zeW50YXggPiBkaXYgPiAuZXJyb3Ige1xuICAgIGNvbG9yOiAke2Vycm9yQ29sb3VyfTtcbiAgICB0ZXh0LWRlY29yYXRpb24tbGluZTogdW5kZXJsaW5lO1xuICAgIHRleHQtZGVjb3JhdGlvbi1jb2xvcjogJHtlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyfTtcbiAgfSBcblxuYDtcblxuZXhwb3J0IGRlZmF1bHQgbm9taW5hbFN5bnRheFN0eWxlO1xuIl0sIm5hbWVzIjpbIm5vbWluYWxTeW50YXhTdHlsZSIsInNwZWNpYWxDb2xvdXIiLCJ0eXBlQ29sb3VyIiwiY29tbWVudENvbG91ciIsIm5vbnNlbnNlQ29sb3VyIiwib3BlcmF0b3JDb2xvdXIiLCJjb250ZXh0Q29sb3VyIiwibWV0YVR5cGVDb2xvdXIiLCJkZWxpbWl0ZXJDb2xvdXIiLCJrZXl3b3JkQ29sb3VyIiwic3RyaW5nTGl0ZXJhbENvbG91ciIsImxhYmVsTmFtZUNvbG91ciIsImxhYmVsTmFtZUhvdmVyQ29sb3VyIiwiZGlzYWJsZWRMYWJlbE5hbWVDb2xvdXIiLCJyZWZlcmVuY2VOYW1lQ29sb3VyIiwicmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyIiwiZGlzYWJsZWRSZWZlcmVuY2VOYW1lQ29sb3VyIiwiZXJyb3JDb2xvdXIiLCJlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkE2REE7OztlQUFBOzs7dUJBM0QyRzt1QkFhL0Q7QUFFNUMsSUFBTUEscUJBQXFCLEFBQUMsZ0RBSWtCQyxPQUZIQyxtQkFBVSxFQUFDLHVEQUlSQyxPQUZBRixzQkFBYSxFQUFDLHlEQUliRyxPQUZERCxzQkFBYSxFQUFDLDBEQUliRSxPQUZBRCx1QkFBYyxFQUFDLHlEQUloQkUsT0FGQ0QsdUJBQWMsRUFBQyx5REFJZEUsT0FGRkQsc0JBQWEsRUFBQyx5REFJWkUsT0FGQUQsdUJBQWMsRUFBQyx5REFJVEUsT0FGTkQsd0JBQWUsRUFBQyxpRUFJUkMsT0FGRkEsc0JBQWEsRUFBQyxtRUFJZkMsT0FGR0Qsc0JBQWEsRUFBQyxnRUFJckJFLE9BRklELDRCQUFtQixFQUFDLDBEQUlsQkUsT0FGTkQsd0JBQWUsRUFBQyxrRUFJUEUsT0FGSEQsNkJBQW9CLEVBQUMsbUVBSXZCRSxPQUZLRCxnQ0FBdUIsRUFBQyxnRUFJdkJFLE9BRk5ELDRCQUFtQixFQUFDLHNFQUlYRSxPQUZIRCxpQ0FBd0IsRUFBQyx1RUFLdkVFLE9BSGlERCxvQ0FBMkIsRUFBQyw0REFLN0RFLE9BRmhCRCxvQkFBVyxFQUFDLHdFQUU4QixPQUExQkMsa0NBQXlCLEVBQUM7SUFLdkQsWUFBZWxCIn0=