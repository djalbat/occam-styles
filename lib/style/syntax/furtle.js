"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _furtle = require("../../scheme/syntax/furtle");
var furtleSyntaxStyle = "\n\n  .furtle.syntax > div > .type { color: ".concat(_furtle.typeColour, "; }\n\n  .furtle.syntax > div > .return { color: ").concat(_furtle.returnColour, "; }\n  \n  .furtle.syntax > div > .special { color: ").concat(_furtle.specialColour, "; }\n  \n  .furtle.syntax > div > .keyword { color: ").concat(_furtle.keywordColour, "; }\n  \n  .furtle.syntax > div > .comment { color: ").concat(_default.commentColour, "; }\n  \n  .furtle.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .furtle.syntax > div > .operator { color: ").concat(_furtle.operatorColour, "; }\n  \n  .furtle.syntax > div > .primitive { color: ").concat(_furtle.primitiveColour, "; }\n\n  .furtle.syntax > div > .expression { color: ").concat(_furtle.expressionColour, "; }\n\n  .furtle.syntax > div > .instruction { color: ").concat(_furtle.instructionColour, "; }\n\n  .furtle.syntax > div > .variable-name { color: ").concat(_furtle.variableNameColour, "; }\n  \n  .furtle.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n  \n  .furtle.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = furtleSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvZnVydGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBlcnJvckNvbG91ciwgY29tbWVudENvbG91ciwgbm9uc2Vuc2VDb2xvdXIsIHN0cmluZ0xpdGVyYWxDb2xvdXIsIGVycm9yVGV4dERlY29yYXRpb25Db2xvdXIgfSBmcm9tIFwiLi4vLi4vc2NoZW1lL3N5bnRheC9kZWZhdWx0XCI7XG5pbXBvcnQgeyB0eXBlQ29sb3VyLFxuICAgICAgICAgcmV0dXJuQ29sb3VyLFxuICAgICAgICAgc3BlY2lhbENvbG91cixcbiAgICAgICAgIGtleXdvcmRDb2xvdXIsXG4gICAgICAgICBvcGVyYXRvckNvbG91cixcbiAgICAgICAgIHByaW1pdGl2ZUNvbG91cixcbiAgICAgICAgIGV4cHJlc3Npb25Db2xvdXIsXG4gICAgICAgICBpbnN0cnVjdGlvbkNvbG91cixcbiAgICAgICAgIHZhcmlhYmxlTmFtZUNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L2Z1cnRsZVwiO1xuXG5jb25zdCBmdXJ0bGVTeW50YXhTdHlsZSA9IGBcblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC50eXBlIHsgY29sb3I6ICR7dHlwZUNvbG91cn07IH1cblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5yZXR1cm4geyBjb2xvcjogJHtyZXR1cm5Db2xvdXJ9OyB9XG4gIFxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5zcGVjaWFsIHsgY29sb3I6ICR7c3BlY2lhbENvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLmtleXdvcmQgeyBjb2xvcjogJHtrZXl3b3JkQ29sb3VyfTsgfVxuICBcbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAuY29tbWVudCB7IGNvbG9yOiAke2NvbW1lbnRDb2xvdXJ9OyB9XG4gIFxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5ub25zZW5zZSB7IGNvbG9yOiAke25vbnNlbnNlQ29sb3VyfTsgfSBcblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5vcGVyYXRvciB7IGNvbG9yOiAke29wZXJhdG9yQ29sb3VyfTsgfVxuICBcbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAucHJpbWl0aXZlIHsgY29sb3I6ICR7cHJpbWl0aXZlQ29sb3VyfTsgfVxuXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLmV4cHJlc3Npb24geyBjb2xvcjogJHtleHByZXNzaW9uQ29sb3VyfTsgfVxuXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLmluc3RydWN0aW9uIHsgY29sb3I6ICR7aW5zdHJ1Y3Rpb25Db2xvdXJ9OyB9XG5cbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAudmFyaWFibGUtbmFtZSB7IGNvbG9yOiAke3ZhcmlhYmxlTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnN0cmluZy1saXRlcmFsIHsgY29sb3I6ICR7c3RyaW5nTGl0ZXJhbENvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLmVycm9yIHtcbiAgICBjb2xvcjogJHtlcnJvckNvbG91cn07XG4gICAgdGV4dC1kZWNvcmF0aW9uLWxpbmU6IHVuZGVybGluZTtcbiAgICB0ZXh0LWRlY29yYXRpb24tY29sb3I6ICR7ZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91cn07XG4gIH0gXG5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1cnRsZVN5bnRheFN0eWxlO1xuIl0sIm5hbWVzIjpbImZ1cnRsZVN5bnRheFN0eWxlIiwicmV0dXJuQ29sb3VyIiwidHlwZUNvbG91ciIsInNwZWNpYWxDb2xvdXIiLCJrZXl3b3JkQ29sb3VyIiwiY29tbWVudENvbG91ciIsIm5vbnNlbnNlQ29sb3VyIiwib3BlcmF0b3JDb2xvdXIiLCJwcmltaXRpdmVDb2xvdXIiLCJleHByZXNzaW9uQ29sb3VyIiwiaW5zdHJ1Y3Rpb25Db2xvdXIiLCJ2YXJpYWJsZU5hbWVDb2xvdXIiLCJzdHJpbmdMaXRlcmFsQ29sb3VyIiwiZXJyb3JDb2xvdXIiLCJlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkErQ0E7OztlQUFBOzs7dUJBN0MyRztzQkFTeEU7QUFFbkMsSUFBTUEsb0JBQW9CLEFBQUMsK0NBSWlCQyxPQUZGQyxrQkFBVSxFQUFDLHFEQUlSQyxPQUZERixvQkFBWSxFQUFDLHdEQUlaRyxPQUZBRCxxQkFBYSxFQUFDLHdEQUlkRSxPQUZBRCxxQkFBYSxFQUFDLHdEQUliRSxPQUZERCxzQkFBYSxFQUFDLHlEQUliRSxPQUZBRCx1QkFBYyxFQUFDLHdEQUlkRSxPQUZERCxzQkFBYyxFQUFDLDBEQUliRSxPQUZERCx1QkFBZSxFQUFDLHlEQUlkRSxPQUZERCx3QkFBZ0IsRUFBQywwREFJZEUsT0FGRkQseUJBQWlCLEVBQUMsNERBSWZFLE9BRkRELDBCQUFrQixFQUFDLCtEQUt6REUsT0FIdUNELDRCQUFtQixFQUFDLDJEQUszQ0UsT0FGaEJELG9CQUFXLEVBQUMsd0VBRThCLE9BQTFCQyxrQ0FBeUIsRUFBQztJQUt2RCxZQUFlZCJ9