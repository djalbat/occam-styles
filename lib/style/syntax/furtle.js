"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _furtle = require("../../scheme/syntax/furtle");
var furtleSyntaxStyle = "\n\n  .furtle.syntax > div > .type { color: ".concat(_furtle.typeColour, "; }\n\n  .furtle.syntax > div > .query { color: ").concat(_furtle.queryColour, "; }\n\n  .furtle.syntax > div > .return { color: ").concat(_furtle.returnColour, "; }\n  \n  .furtle.syntax > div > .special { color: ").concat(_furtle.specialColour, "; }\n  \n  .furtle.syntax > div > .keyword { color: ").concat(_furtle.keywordColour, "; }\n  \n  .furtle.syntax > div > .comment { color: ").concat(_default.commentColour, "; }\n  \n  .furtle.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .furtle.syntax > div > .operator { color: ").concat(_furtle.operatorColour, "; }\n  \n  .furtle.syntax > div > .primitive { color: ").concat(_furtle.primitiveColour, "; }\n\n  .furtle.syntax > div > .expression { color: ").concat(_furtle.expressionColour, "; }\n\n  .furtle.syntax > div > .variable-name { color: ").concat(_furtle.functionNameColour, "; }\n  \n  .furtle.syntax > div > .variable-name { color: ").concat(_furtle.variableNameColour, "; }\n  \n  .furtle.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n  \n  .furtle.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = furtleSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvZnVydGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBlcnJvckNvbG91ciwgY29tbWVudENvbG91ciwgbm9uc2Vuc2VDb2xvdXIsIHN0cmluZ0xpdGVyYWxDb2xvdXIsIGVycm9yVGV4dERlY29yYXRpb25Db2xvdXIgfSBmcm9tIFwiLi4vLi4vc2NoZW1lL3N5bnRheC9kZWZhdWx0XCI7XG5pbXBvcnQgeyB0eXBlQ29sb3VyLFxuICAgICAgICAgcXVlcnlDb2xvdXIsXG4gICAgICAgICByZXR1cm5Db2xvdXIsXG4gICAgICAgICBzcGVjaWFsQ29sb3VyLFxuICAgICAgICAga2V5d29yZENvbG91cixcbiAgICAgICAgIG9wZXJhdG9yQ29sb3VyLFxuICAgICAgICAgcHJpbWl0aXZlQ29sb3VyLFxuICAgICAgICAgZXhwcmVzc2lvbkNvbG91cixcbiAgICAgICAgIGZ1bmN0aW9uTmFtZUNvbG91cixcbiAgICAgICAgIHZhcmlhYmxlTmFtZUNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L2Z1cnRsZVwiO1xuXG5jb25zdCBmdXJ0bGVTeW50YXhTdHlsZSA9IGBcblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC50eXBlIHsgY29sb3I6ICR7dHlwZUNvbG91cn07IH1cblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5xdWVyeSB7IGNvbG9yOiAke3F1ZXJ5Q29sb3VyfTsgfVxuXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnJldHVybiB7IGNvbG9yOiAke3JldHVybkNvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnNwZWNpYWwgeyBjb2xvcjogJHtzcGVjaWFsQ29sb3VyfTsgfVxuICBcbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAua2V5d29yZCB7IGNvbG9yOiAke2tleXdvcmRDb2xvdXJ9OyB9XG4gIFxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5jb21tZW50IHsgY29sb3I6ICR7Y29tbWVudENvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLm5vbnNlbnNlIHsgY29sb3I6ICR7bm9uc2Vuc2VDb2xvdXJ9OyB9IFxuXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLm9wZXJhdG9yIHsgY29sb3I6ICR7b3BlcmF0b3JDb2xvdXJ9OyB9XG4gIFxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5wcmltaXRpdmUgeyBjb2xvcjogJHtwcmltaXRpdmVDb2xvdXJ9OyB9XG5cbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAuZXhwcmVzc2lvbiB7IGNvbG9yOiAke2V4cHJlc3Npb25Db2xvdXJ9OyB9XG5cbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAudmFyaWFibGUtbmFtZSB7IGNvbG9yOiAke2Z1bmN0aW9uTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnZhcmlhYmxlLW5hbWUgeyBjb2xvcjogJHt2YXJpYWJsZU5hbWVDb2xvdXJ9OyB9XG4gIFxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5zdHJpbmctbGl0ZXJhbCB7IGNvbG9yOiAke3N0cmluZ0xpdGVyYWxDb2xvdXJ9OyB9XG4gIFxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5lcnJvciB7XG4gICAgY29sb3I6ICR7ZXJyb3JDb2xvdXJ9O1xuICAgIHRleHQtZGVjb3JhdGlvbi1saW5lOiB1bmRlcmxpbmU7XG4gICAgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiAke2Vycm9yVGV4dERlY29yYXRpb25Db2xvdXJ9O1xuICB9IFxuXG5gO1xuXG5leHBvcnQgZGVmYXVsdCBmdXJ0bGVTeW50YXhTdHlsZTtcbiJdLCJuYW1lcyI6WyJmdXJ0bGVTeW50YXhTdHlsZSIsInF1ZXJ5Q29sb3VyIiwidHlwZUNvbG91ciIsInJldHVybkNvbG91ciIsInNwZWNpYWxDb2xvdXIiLCJrZXl3b3JkQ29sb3VyIiwiY29tbWVudENvbG91ciIsIm5vbnNlbnNlQ29sb3VyIiwib3BlcmF0b3JDb2xvdXIiLCJwcmltaXRpdmVDb2xvdXIiLCJleHByZXNzaW9uQ29sb3VyIiwiZnVuY3Rpb25OYW1lQ29sb3VyIiwidmFyaWFibGVOYW1lQ29sb3VyIiwic3RyaW5nTGl0ZXJhbENvbG91ciIsImVycm9yQ29sb3VyIiwiZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91ciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBa0RBOzs7ZUFBQTs7O3VCQWhEMkc7c0JBVXhFO0FBRW5DLElBQU1BLG9CQUFvQixBQUFDLCtDQUlnQkMsT0FGREMsa0JBQVUsRUFBQyxvREFJVEMsT0FGREYsbUJBQVcsRUFBQyxxREFJVkcsT0FGREQsb0JBQVksRUFBQyx3REFJWkUsT0FGQUQscUJBQWEsRUFBQyx3REFJZEUsT0FGQUQscUJBQWEsRUFBQyx3REFJYkUsT0FGREQsc0JBQWEsRUFBQyx5REFJYkUsT0FGQUQsdUJBQWMsRUFBQyx3REFJZEUsT0FGREQsc0JBQWMsRUFBQywwREFJYkUsT0FGREQsdUJBQWUsRUFBQyx5REFJWkUsT0FGSEQsd0JBQWdCLEVBQUMsNERBSWRFLE9BRkFELDBCQUFrQixFQUFDLDhEQUlsQkUsT0FGREQsMEJBQWtCLEVBQUMsK0RBS3pERSxPQUh1Q0QsNEJBQW1CLEVBQUMsMkRBSzNDRSxPQUZoQkQsb0JBQVcsRUFBQyx3RUFFOEIsT0FBMUJDLGtDQUF5QixFQUFDO0lBS3ZELFlBQWVmIn0=