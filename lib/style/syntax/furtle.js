"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _furtle = require("../../scheme/syntax/furtle");
var furtleSyntaxStyle = "\n\n  .furtle.syntax > div > .type { color: ".concat(_furtle.typeColour, "; }\n\n  .furtle.syntax > div > .query { color: ").concat(_furtle.queryColour, "; }\n\n  .furtle.syntax > div > .return { color: ").concat(_furtle.returnColour, "; }\n  \n  .furtle.syntax > div > .bracket { color: ").concat(_furtle.bracketColour, "; }\n  \n  .furtle.syntax > div > .special { color: ").concat(_furtle.specialColour, "; }\n  \n  .furtle.syntax > div > .keyword { color: ").concat(_furtle.keywordColour, "; }\n  \n  .furtle.syntax > div > .comment { color: ").concat(_default.commentColour, "; }\n  \n  .furtle.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .furtle.syntax > div > .operator { color: ").concat(_furtle.operatorColour, "; }\n  \n  .furtle.syntax > div > .primitive { color: ").concat(_furtle.primitiveColour, "; }\n\n  .furtle.syntax > div > .expression { color: ").concat(_furtle.expressionColour, "; }\n\n  .furtle.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n  \n  .furtle.syntax > div > .label-name { color: ").concat(_furtle.labelNameColour, "; }\n  \n  .furtle.syntax > div > .label-name:hover { color: ").concat(_furtle.labelNameHoverColour, "; }\n\n  .furtle.syntax > div > .label-name:disabled { color: ").concat(_furtle.disabledLabelNameColour, "; }\n  \n  .furtle.syntax > div > .reference-name { color: ").concat(_furtle.referenceNameColour, "; }\n  \n  .furtle.syntax > div > .reference-name:hover { color: ").concat(_furtle.referenceNameHoverColour, "; }\n\n  .furtle.syntax > div > .reference-name:disabled { color: ").concat(_furtle.disabledReferenceNameColour, "; }\n\n  .furtle.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = furtleSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvZnVydGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBlcnJvckNvbG91ciwgY29tbWVudENvbG91ciwgbm9uc2Vuc2VDb2xvdXIsIHN0cmluZ0xpdGVyYWxDb2xvdXIsIGVycm9yVGV4dERlY29yYXRpb25Db2xvdXIgfSBmcm9tIFwiLi4vLi4vc2NoZW1lL3N5bnRheC9kZWZhdWx0XCI7XG5pbXBvcnQgeyB0eXBlQ29sb3VyLFxuICAgICAgICAgcXVlcnlDb2xvdXIsXG4gICAgICAgICByZXR1cm5Db2xvdXIsXG4gICAgICAgICBicmFja2V0Q29sb3VyLFxuICAgICAgICAgc3BlY2lhbENvbG91cixcbiAgICAgICAgIGtleXdvcmRDb2xvdXIsXG4gICAgICAgICBvcGVyYXRvckNvbG91cixcbiAgICAgICAgIHByaW1pdGl2ZUNvbG91cixcbiAgICAgICAgIGV4cHJlc3Npb25Db2xvdXIsXG4gICAgICAgICBsYWJlbE5hbWVDb2xvdXIsXG4gICAgICAgICByZWZlcmVuY2VOYW1lQ29sb3VyLFxuICAgICAgICAgbGFiZWxOYW1lSG92ZXJDb2xvdXIsXG4gICAgICAgICBkaXNhYmxlZExhYmVsTmFtZUNvbG91cixcbiAgICAgICAgIHJlZmVyZW5jZU5hbWVIb3ZlckNvbG91cixcbiAgICAgICAgIGRpc2FibGVkUmVmZXJlbmNlTmFtZUNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L2Z1cnRsZVwiO1xuXG5jb25zdCBmdXJ0bGVTeW50YXhTdHlsZSA9IGBcblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC50eXBlIHsgY29sb3I6ICR7dHlwZUNvbG91cn07IH1cblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5xdWVyeSB7IGNvbG9yOiAke3F1ZXJ5Q29sb3VyfTsgfVxuXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnJldHVybiB7IGNvbG9yOiAke3JldHVybkNvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLmJyYWNrZXQgeyBjb2xvcjogJHticmFja2V0Q29sb3VyfTsgfVxuICBcbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAuc3BlY2lhbCB7IGNvbG9yOiAke3NwZWNpYWxDb2xvdXJ9OyB9XG4gIFxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5rZXl3b3JkIHsgY29sb3I6ICR7a2V5d29yZENvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLmNvbW1lbnQgeyBjb2xvcjogJHtjb21tZW50Q29sb3VyfTsgfVxuICBcbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAubm9uc2Vuc2UgeyBjb2xvcjogJHtub25zZW5zZUNvbG91cn07IH0gXG5cbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAub3BlcmF0b3IgeyBjb2xvcjogJHtvcGVyYXRvckNvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnByaW1pdGl2ZSB7IGNvbG9yOiAke3ByaW1pdGl2ZUNvbG91cn07IH1cblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5leHByZXNzaW9uIHsgY29sb3I6ICR7ZXhwcmVzc2lvbkNvbG91cn07IH1cblxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5zdHJpbmctbGl0ZXJhbCB7IGNvbG9yOiAke3N0cmluZ0xpdGVyYWxDb2xvdXJ9OyB9XG4gIFxuICAuZnVydGxlLnN5bnRheCA+IGRpdiA+IC5sYWJlbC1uYW1lIHsgY29sb3I6ICR7bGFiZWxOYW1lQ29sb3VyfTsgfVxuICBcbiAgLmZ1cnRsZS5zeW50YXggPiBkaXYgPiAubGFiZWwtbmFtZTpob3ZlciB7IGNvbG9yOiAke2xhYmVsTmFtZUhvdmVyQ29sb3VyfTsgfVxuXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLmxhYmVsLW5hbWU6ZGlzYWJsZWQgeyBjb2xvcjogJHtkaXNhYmxlZExhYmVsTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnJlZmVyZW5jZS1uYW1lIHsgY29sb3I6ICR7cmVmZXJlbmNlTmFtZUNvbG91cn07IH1cbiAgXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnJlZmVyZW5jZS1uYW1lOmhvdmVyIHsgY29sb3I6ICR7cmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyfTsgfVxuXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLnJlZmVyZW5jZS1uYW1lOmRpc2FibGVkIHsgY29sb3I6ICR7ZGlzYWJsZWRSZWZlcmVuY2VOYW1lQ29sb3VyfTsgfVxuXG4gIC5mdXJ0bGUuc3ludGF4ID4gZGl2ID4gLmVycm9yIHtcbiAgICBjb2xvcjogJHtlcnJvckNvbG91cn07XG4gICAgdGV4dC1kZWNvcmF0aW9uLWxpbmU6IHVuZGVybGluZTtcbiAgICB0ZXh0LWRlY29yYXRpb24tY29sb3I6ICR7ZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91cn07XG4gIH0gXG5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1cnRsZVN5bnRheFN0eWxlO1xuIl0sIm5hbWVzIjpbImZ1cnRsZVN5bnRheFN0eWxlIiwicXVlcnlDb2xvdXIiLCJ0eXBlQ29sb3VyIiwicmV0dXJuQ29sb3VyIiwiYnJhY2tldENvbG91ciIsInNwZWNpYWxDb2xvdXIiLCJrZXl3b3JkQ29sb3VyIiwiY29tbWVudENvbG91ciIsIm5vbnNlbnNlQ29sb3VyIiwib3BlcmF0b3JDb2xvdXIiLCJwcmltaXRpdmVDb2xvdXIiLCJleHByZXNzaW9uQ29sb3VyIiwic3RyaW5nTGl0ZXJhbENvbG91ciIsImxhYmVsTmFtZUNvbG91ciIsImxhYmVsTmFtZUhvdmVyQ29sb3VyIiwiZGlzYWJsZWRMYWJlbE5hbWVDb2xvdXIiLCJyZWZlcmVuY2VOYW1lQ29sb3VyIiwicmVmZXJlbmNlTmFtZUhvdmVyQ29sb3VyIiwiZGlzYWJsZWRSZWZlcmVuY2VOYW1lQ29sb3VyIiwiZXJyb3JDb2xvdXIiLCJlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFpRUE7OztlQUFBOzs7dUJBL0QyRztzQkFlL0Q7QUFFNUMsSUFBTUEsb0JBQW9CLEFBQUMsK0NBSWdCQyxPQUZEQyxrQkFBVSxFQUFDLG9EQUlUQyxPQUZERixtQkFBVyxFQUFDLHFEQUlWRyxPQUZERCxvQkFBWSxFQUFDLHdEQUlaRSxPQUZBRCxxQkFBYSxFQUFDLHdEQUlkRSxPQUZBRCxxQkFBYSxFQUFDLHdEQUlkRSxPQUZBRCxxQkFBYSxFQUFDLHdEQUliRSxPQUZERCxzQkFBYSxFQUFDLHlEQUliRSxPQUZBRCx1QkFBYyxFQUFDLHdEQUlkRSxPQUZERCxzQkFBYyxFQUFDLDBEQUliRSxPQUZERCx1QkFBZSxFQUFDLHlEQUlYRSxPQUZKRCx3QkFBZ0IsRUFBQyw2REFJakJFLE9BRklELDRCQUFtQixFQUFDLDJEQUlsQkUsT0FGTkQsdUJBQWUsRUFBQyxpRUFJUEUsT0FGSEQsNEJBQW9CLEVBQUMsa0VBSXZCRSxPQUZLRCwrQkFBdUIsRUFBQywrREFJdkJFLE9BRk5ELDJCQUFtQixFQUFDLHFFQUlYRSxPQUZIRCxnQ0FBd0IsRUFBQyxzRUFLdEVFLE9BSGdERCxtQ0FBMkIsRUFBQyx5REFLNURFLE9BRmhCRCxvQkFBVyxFQUFDLHdFQUU4QixPQUExQkMsa0NBQXlCLEVBQUM7SUFLdkQsWUFBZXBCIn0=