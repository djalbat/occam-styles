"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _markdownStyle = require("../../scheme/syntax/markdownStyle");
var markdownStyleSyntaxStyle = "\n\n  .markdown-style.syntax > div > * { color: ".concat(_markdownStyle.colour, "; }\n\n  .markdown-style.syntax > div > .name { color: ").concat(_markdownStyle.nameColour, "; }\n\n  .markdown-style.syntax > div > .value { color: ").concat(_markdownStyle.valueColour, "; }\n\n  .markdown-style.syntax > div > .media { color: ").concat(_markdownStyle.mediaColour, "; }\n\n  .markdown-style.syntax > div > .special { color: ").concat(_markdownStyle.specialColour, "; }\n\n  .markdown-style.syntax > div > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  .markdown-style.syntax > div > .rule-name { color: ").concat(_markdownStyle.ruleNameColour, "; }\n\n  .markdown-style.syntax > div > .delimiter { color: ").concat(_markdownStyle.delimiterColour, "; }\n\n  .markdown-style.syntax > div > .media-type { color: ").concat(_markdownStyle.mediaTypeColour, "; }\n\n  .markdown-style.syntax > div > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n\n  .markdown-style.syntax > div > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = markdownStyleSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvbWFya2Rvd25TdHlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZXJyb3JDb2xvdXIsIG5vbnNlbnNlQ29sb3VyLCBzdHJpbmdMaXRlcmFsQ29sb3VyLCBlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIH0gZnJvbSBcIi4uLy4uL3NjaGVtZS9zeW50YXgvZGVmYXVsdFwiO1xuaW1wb3J0IHsgY29sb3VyLCBuYW1lQ29sb3VyLCB2YWx1ZUNvbG91ciwgbWVkaWFDb2xvdXIsIHNwZWNpYWxDb2xvdXIsIHJ1bGVOYW1lQ29sb3VyLCBkZWxpbWl0ZXJDb2xvdXIsIG1lZGlhVHlwZUNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L21hcmtkb3duU3R5bGVcIjtcblxuY29uc3QgbWFya2Rvd25TdHlsZVN5bnRheFN0eWxlID0gYFxuXG4gIC5tYXJrZG93bi1zdHlsZS5zeW50YXggPiBkaXYgPiAqIHsgY29sb3I6ICR7Y29sb3VyfTsgfVxuXG4gIC5tYXJrZG93bi1zdHlsZS5zeW50YXggPiBkaXYgPiAubmFtZSB7IGNvbG9yOiAke25hbWVDb2xvdXJ9OyB9XG5cbiAgLm1hcmtkb3duLXN0eWxlLnN5bnRheCA+IGRpdiA+IC52YWx1ZSB7IGNvbG9yOiAke3ZhbHVlQ29sb3VyfTsgfVxuXG4gIC5tYXJrZG93bi1zdHlsZS5zeW50YXggPiBkaXYgPiAubWVkaWEgeyBjb2xvcjogJHttZWRpYUNvbG91cn07IH1cblxuICAubWFya2Rvd24tc3R5bGUuc3ludGF4ID4gZGl2ID4gLnNwZWNpYWwgeyBjb2xvcjogJHtzcGVjaWFsQ29sb3VyfTsgfVxuXG4gIC5tYXJrZG93bi1zdHlsZS5zeW50YXggPiBkaXYgPiAubm9uc2Vuc2UgeyBjb2xvcjogJHtub25zZW5zZUNvbG91cn07IH0gXG5cbiAgLm1hcmtkb3duLXN0eWxlLnN5bnRheCA+IGRpdiA+IC5ydWxlLW5hbWUgeyBjb2xvcjogJHtydWxlTmFtZUNvbG91cn07IH1cblxuICAubWFya2Rvd24tc3R5bGUuc3ludGF4ID4gZGl2ID4gLmRlbGltaXRlciB7IGNvbG9yOiAke2RlbGltaXRlckNvbG91cn07IH1cblxuICAubWFya2Rvd24tc3R5bGUuc3ludGF4ID4gZGl2ID4gLm1lZGlhLXR5cGUgeyBjb2xvcjogJHttZWRpYVR5cGVDb2xvdXJ9OyB9XG5cbiAgLm1hcmtkb3duLXN0eWxlLnN5bnRheCA+IGRpdiA+IC5zdHJpbmctbGl0ZXJhbCB7IGNvbG9yOiAke3N0cmluZ0xpdGVyYWxDb2xvdXJ9OyB9XG5cbiAgLm1hcmtkb3duLXN0eWxlLnN5bnRheCA+IGRpdiA+IC5lcnJvciB7XG4gICAgY29sb3I6ICR7ZXJyb3JDb2xvdXJ9O1xuICAgIHRleHQtZGVjb3JhdGlvbi1saW5lOiB1bmRlcmxpbmU7XG4gICAgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiAke2Vycm9yVGV4dERlY29yYXRpb25Db2xvdXJ9O1xuICB9IFxuXG5gO1xuXG5leHBvcnQgZGVmYXVsdCBtYXJrZG93blN0eWxlU3ludGF4U3R5bGU7XG4iXSwibmFtZXMiOlsibWFya2Rvd25TdHlsZVN5bnRheFN0eWxlIiwibmFtZUNvbG91ciIsImNvbG91ciIsInZhbHVlQ29sb3VyIiwibWVkaWFDb2xvdXIiLCJzcGVjaWFsQ29sb3VyIiwibm9uc2Vuc2VDb2xvdXIiLCJydWxlTmFtZUNvbG91ciIsImRlbGltaXRlckNvbG91ciIsIm1lZGlhVHlwZUNvbG91ciIsInN0cmluZ0xpdGVyYWxDb2xvdXIiLCJlcnJvckNvbG91ciIsImVycm9yVGV4dERlY29yYXRpb25Db2xvdXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQW1DQTs7O2VBQUE7Ozt1QkFqQzRGOzZCQUNrQztBQUU5SCxJQUFNQSwyQkFBMkIsQUFBQyxtREFJZ0JDLE9BRkpDLHFCQUFNLEVBQUMsMkRBSUZDLE9BRkRGLHlCQUFVLEVBQUMsNERBSVZHLE9BRkFELDBCQUFXLEVBQUMsNERBSVZFLE9BRkZELDBCQUFXLEVBQUMsOERBSVRFLE9BRkRELDRCQUFhLEVBQUMsK0RBSVpFLE9BRkRELHVCQUFjLEVBQUMsaUVBSWRFLE9BRkFELDZCQUFjLEVBQUMsZ0VBSWRFLE9BRkRELDhCQUFlLEVBQUMsaUVBSVhFLE9BRkpELDhCQUFlLEVBQUMscUVBSzNERSxPQUgrQ0QsNEJBQW1CLEVBQUMsaUVBS25ERSxPQUZoQkQsb0JBQVcsRUFBQyx3RUFFOEIsT0FBMUJDLGtDQUF5QixFQUFDO0lBS3ZELFlBQWVaIn0=