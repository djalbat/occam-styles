"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _markdownStyle = require("../../scheme/syntax/markdownStyle");
var markdownStyleSyntaxStyle = "\n\n  div.markdown-style.lines > div.line > div.syntax > * { color: ".concat(_markdownStyle.colour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .name { color: ").concat(_markdownStyle.nameColour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .value { color: ").concat(_markdownStyle.valueColour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .media { color: ").concat(_markdownStyle.mediaColour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .special { color: ").concat(_markdownStyle.specialColour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  div.markdown-style.lines > div.line > div.syntax > .rule-name { color: ").concat(_markdownStyle.ruleNameColour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .delimiter { color: ").concat(_markdownStyle.delimiterColour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .media-type { color: ").concat(_markdownStyle.mediaTypeColour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .string-literal { color: ").concat(_default.stringLiteralColour, "; }\n\n  div.markdown-style.lines > div.line > div.syntax > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = markdownStyleSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvbWFya2Rvd25TdHlsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZXJyb3JDb2xvdXIsIG5vbnNlbnNlQ29sb3VyLCBzdHJpbmdMaXRlcmFsQ29sb3VyLCBlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIH0gZnJvbSBcIi4uLy4uL3NjaGVtZS9zeW50YXgvZGVmYXVsdFwiO1xuaW1wb3J0IHsgY29sb3VyLCBuYW1lQ29sb3VyLCB2YWx1ZUNvbG91ciwgbWVkaWFDb2xvdXIsIHNwZWNpYWxDb2xvdXIsIHJ1bGVOYW1lQ29sb3VyLCBkZWxpbWl0ZXJDb2xvdXIsIG1lZGlhVHlwZUNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L21hcmtkb3duU3R5bGVcIjtcblxuY29uc3QgbWFya2Rvd25TdHlsZVN5bnRheFN0eWxlID0gYFxuXG4gIGRpdi5tYXJrZG93bi1zdHlsZS5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+ICogeyBjb2xvcjogJHtjb2xvdXJ9OyB9XG5cbiAgZGl2Lm1hcmtkb3duLXN0eWxlLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLm5hbWUgeyBjb2xvcjogJHtuYW1lQ29sb3VyfTsgfVxuXG4gIGRpdi5tYXJrZG93bi1zdHlsZS5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+IC52YWx1ZSB7IGNvbG9yOiAke3ZhbHVlQ29sb3VyfTsgfVxuXG4gIGRpdi5tYXJrZG93bi1zdHlsZS5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+IC5tZWRpYSB7IGNvbG9yOiAke21lZGlhQ29sb3VyfTsgfVxuXG4gIGRpdi5tYXJrZG93bi1zdHlsZS5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+IC5zcGVjaWFsIHsgY29sb3I6ICR7c3BlY2lhbENvbG91cn07IH1cblxuICBkaXYubWFya2Rvd24tc3R5bGUubGluZXMgPiBkaXYubGluZSA+IGRpdi5zeW50YXggPiAubm9uc2Vuc2UgeyBjb2xvcjogJHtub25zZW5zZUNvbG91cn07IH0gXG5cbiAgZGl2Lm1hcmtkb3duLXN0eWxlLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLnJ1bGUtbmFtZSB7IGNvbG9yOiAke3J1bGVOYW1lQ29sb3VyfTsgfVxuXG4gIGRpdi5tYXJrZG93bi1zdHlsZS5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+IC5kZWxpbWl0ZXIgeyBjb2xvcjogJHtkZWxpbWl0ZXJDb2xvdXJ9OyB9XG5cbiAgZGl2Lm1hcmtkb3duLXN0eWxlLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLm1lZGlhLXR5cGUgeyBjb2xvcjogJHttZWRpYVR5cGVDb2xvdXJ9OyB9XG5cbiAgZGl2Lm1hcmtkb3duLXN0eWxlLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLnN0cmluZy1saXRlcmFsIHsgY29sb3I6ICR7c3RyaW5nTGl0ZXJhbENvbG91cn07IH1cblxuICBkaXYubWFya2Rvd24tc3R5bGUubGluZXMgPiBkaXYubGluZSA+IGRpdi5zeW50YXggPiAuZXJyb3Ige1xuICAgIGNvbG9yOiAke2Vycm9yQ29sb3VyfTtcbiAgICB0ZXh0LWRlY29yYXRpb24tbGluZTogdW5kZXJsaW5lO1xuICAgIHRleHQtZGVjb3JhdGlvbi1jb2xvcjogJHtlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyfTtcbiAgfSBcblxuYDtcblxuZXhwb3J0IGRlZmF1bHQgbWFya2Rvd25TdHlsZVN5bnRheFN0eWxlO1xuIl0sIm5hbWVzIjpbIm1hcmtkb3duU3R5bGVTeW50YXhTdHlsZSIsIm5hbWVDb2xvdXIiLCJjb2xvdXIiLCJ2YWx1ZUNvbG91ciIsIm1lZGlhQ29sb3VyIiwic3BlY2lhbENvbG91ciIsIm5vbnNlbnNlQ29sb3VyIiwicnVsZU5hbWVDb2xvdXIiLCJkZWxpbWl0ZXJDb2xvdXIiLCJtZWRpYVR5cGVDb2xvdXIiLCJzdHJpbmdMaXRlcmFsQ29sb3VyIiwiZXJyb3JDb2xvdXIiLCJlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFtQ0E7OztlQUFBOzs7dUJBakM0Rjs2QkFDa0M7QUFFOUgsSUFBTUEsMkJBQTJCLEFBQUMsdUVBSW9DQyxPQUZKQyxxQkFBTSxFQUFDLCtFQUlGQyxPQUZERix5QkFBVSxFQUFDLGdGQUlWRyxPQUZBRCwwQkFBVyxFQUFDLGdGQUlWRSxPQUZGRCwwQkFBVyxFQUFDLGtGQUlURSxPQUZERCw0QkFBYSxFQUFDLG1GQUlaRSxPQUZERCx1QkFBYyxFQUFDLHFGQUlkRSxPQUZBRCw2QkFBYyxFQUFDLG9GQUlkRSxPQUZERCw4QkFBZSxFQUFDLHFGQUlYRSxPQUZKRCw4QkFBZSxFQUFDLHlGQUsvRUUsT0FIbUVELDRCQUFtQixFQUFDLHFGQUt2RUUsT0FGaEJELG9CQUFXLEVBQUMsd0VBRThCLE9BQTFCQyxrQ0FBeUIsRUFBQztJQUt2RCxZQUFlWiJ9