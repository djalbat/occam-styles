"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default1;
    }
});
var _default = require("../../scheme/syntax/default");
var _markdown = require("../../scheme/syntax/markdown");
var markdownSyntaxStyle = "\n\n  div.markdown.lines > div.line > div.syntax > * { color: ".concat(_markdown.colour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .path { color: ").concat(_markdown.pathColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .path:hover { color: ").concat(_markdown.pathHoverColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .link { color: ").concat(_markdown.linkColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .table { color: ").concat(_markdown.tableColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .marker { color: ").concat(_markdown.markerColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .bullet { color: ").concat(_markdown.bulletColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .listing { color: ").concat(_markdown.listingColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .heading { color: ").concat(_markdown.headingColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .nonsense { color: ").concat(_default.nonsenseColour, "; } \n\n  div.markdown.lines > div.line > div.syntax > .reference { color: ").concat(_markdown.referenceColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .directive { color: ").concat(_markdown.directiveColour, "; }\n\n  div.markdown.lines > div.line > div.syntax > .error {\n    color: ").concat(_default.errorColour, ";\n    text-decoration-line: underline;\n    text-decoration-color: ").concat(_default.errorTextDecorationColour, ";\n  } \n\n");
var _default1 = markdownSyntaxStyle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9zeW50YXgvbWFya2Rvd24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGVycm9yQ29sb3VyLCBub25zZW5zZUNvbG91ciwgZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L2RlZmF1bHRcIjtcbmltcG9ydCB7IGNvbG91cixcbiAgICAgICAgIHBhdGhDb2xvdXIsXG4gICAgICAgICBsaW5rQ29sb3VyLFxuICAgICAgICAgdGFibGVDb2xvdXIsXG4gICAgICAgICBtYXJrZXJDb2xvdXIsXG4gICAgICAgICBidWxsZXRDb2xvdXIsXG4gICAgICAgICBsaXN0aW5nQ29sb3VyLFxuICAgICAgICAgaGVhZGluZ0NvbG91cixcbiAgICAgICAgIHJlZmVyZW5jZUNvbG91cixcbiAgICAgICAgIGRpcmVjdGl2ZUNvbG91cixcbiAgICAgICAgIHBhdGhIb3ZlckNvbG91ciB9IGZyb20gXCIuLi8uLi9zY2hlbWUvc3ludGF4L21hcmtkb3duXCI7XG5cbmNvbnN0IG1hcmtkb3duU3ludGF4U3R5bGUgPSBgXG5cbiAgZGl2Lm1hcmtkb3duLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gKiB7IGNvbG9yOiAke2NvbG91cn07IH1cblxuICBkaXYubWFya2Rvd24ubGluZXMgPiBkaXYubGluZSA+IGRpdi5zeW50YXggPiAucGF0aCB7IGNvbG9yOiAke3BhdGhDb2xvdXJ9OyB9XG5cbiAgZGl2Lm1hcmtkb3duLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLnBhdGg6aG92ZXIgeyBjb2xvcjogJHtwYXRoSG92ZXJDb2xvdXJ9OyB9XG5cbiAgZGl2Lm1hcmtkb3duLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLmxpbmsgeyBjb2xvcjogJHtsaW5rQ29sb3VyfTsgfVxuXG4gIGRpdi5tYXJrZG93bi5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+IC50YWJsZSB7IGNvbG9yOiAke3RhYmxlQ29sb3VyfTsgfVxuXG4gIGRpdi5tYXJrZG93bi5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+IC5tYXJrZXIgeyBjb2xvcjogJHttYXJrZXJDb2xvdXJ9OyB9XG5cbiAgZGl2Lm1hcmtkb3duLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLmJ1bGxldCB7IGNvbG9yOiAke2J1bGxldENvbG91cn07IH1cblxuICBkaXYubWFya2Rvd24ubGluZXMgPiBkaXYubGluZSA+IGRpdi5zeW50YXggPiAubGlzdGluZyB7IGNvbG9yOiAke2xpc3RpbmdDb2xvdXJ9OyB9XG5cbiAgZGl2Lm1hcmtkb3duLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLmhlYWRpbmcgeyBjb2xvcjogJHtoZWFkaW5nQ29sb3VyfTsgfVxuXG4gIGRpdi5tYXJrZG93bi5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+IC5ub25zZW5zZSB7IGNvbG9yOiAke25vbnNlbnNlQ29sb3VyfTsgfSBcblxuICBkaXYubWFya2Rvd24ubGluZXMgPiBkaXYubGluZSA+IGRpdi5zeW50YXggPiAucmVmZXJlbmNlIHsgY29sb3I6ICR7cmVmZXJlbmNlQ29sb3VyfTsgfVxuXG4gIGRpdi5tYXJrZG93bi5saW5lcyA+IGRpdi5saW5lID4gZGl2LnN5bnRheCA+IC5kaXJlY3RpdmUgeyBjb2xvcjogJHtkaXJlY3RpdmVDb2xvdXJ9OyB9XG5cbiAgZGl2Lm1hcmtkb3duLmxpbmVzID4gZGl2LmxpbmUgPiBkaXYuc3ludGF4ID4gLmVycm9yIHtcbiAgICBjb2xvcjogJHtlcnJvckNvbG91cn07XG4gICAgdGV4dC1kZWNvcmF0aW9uLWxpbmU6IHVuZGVybGluZTtcbiAgICB0ZXh0LWRlY29yYXRpb24tY29sb3I6ICR7ZXJyb3JUZXh0RGVjb3JhdGlvbkNvbG91cn07XG4gIH0gXG5cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IG1hcmtkb3duU3ludGF4U3R5bGU7XG4iXSwibmFtZXMiOlsibWFya2Rvd25TeW50YXhTdHlsZSIsInBhdGhDb2xvdXIiLCJjb2xvdXIiLCJwYXRoSG92ZXJDb2xvdXIiLCJsaW5rQ29sb3VyIiwidGFibGVDb2xvdXIiLCJtYXJrZXJDb2xvdXIiLCJidWxsZXRDb2xvdXIiLCJsaXN0aW5nQ29sb3VyIiwiaGVhZGluZ0NvbG91ciIsIm5vbnNlbnNlQ29sb3VyIiwicmVmZXJlbmNlQ29sb3VyIiwiZGlyZWN0aXZlQ29sb3VyIiwiZXJyb3JDb2xvdXIiLCJlcnJvclRleHREZWNvcmF0aW9uQ29sb3VyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFpREE7OztlQUFBOzs7dUJBL0N1RTt3QkFXdkM7QUFFaEMsSUFBTUEsc0JBQXNCLEFBQUMsaUVBSW1DQyxPQUZKQyxnQkFBTSxFQUFDLHlFQUlHQyxPQUZORixvQkFBVSxFQUFDLCtFQUlYRyxPQUZNRCx5QkFBZSxFQUFDLHlFQUlyQkUsT0FGREQsb0JBQVUsRUFBQywwRUFJVEUsT0FGREQscUJBQVcsRUFBQywyRUFJWEUsT0FGQUQsc0JBQVksRUFBQywyRUFJWkUsT0FGREQsc0JBQVksRUFBQyw0RUFJWkUsT0FGQUQsdUJBQWEsRUFBQyw0RUFJYkUsT0FGREQsdUJBQWEsRUFBQyw2RUFJWkUsT0FGREQsdUJBQWMsRUFBQywrRUFJZEUsT0FGQUQseUJBQWUsRUFBQyw4RUFLeEVFLE9BSHdERCx5QkFBZSxFQUFDLCtFQUt4REUsT0FGaEJELG9CQUFXLEVBQUMsd0VBRThCLE9BQTFCQyxrQ0FBeUIsRUFBQztJQUt2RCxZQUFlZCJ9